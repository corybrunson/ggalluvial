[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute opening issues (including questions, bugs, feature requests), updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience fluency, contribution history, social status, age, gender identity expression, sexual orientation, visible invisible disability, personal appearance, body size, ethnic racial identity perception, cultural religious background identity. Examples unacceptable behavior participants include use sexual language imagery, derogatory derisive comments, personal attacks, trolling, public private harassment insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, issues, contributions inconsistent Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances behavior inconsistent Code Conduct may reported opening issue contacting one project maintainers. Code Conduct adapted (changes) Contributor Covenant, version 1.0.0, available https://www.contributor-covenant.org/version/1/0/0/code--conduct.html","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ggalluvial development","title":"Contributing to ggalluvial development","text":"goal guide help contributors ggalluvial plan contributions navigate process. sections cover different types contributions, usually increasing degrees proposed change. Note ggalluvial released Contributor Code Conduct. contributing, agree terms. guide loosely adapted contributing guides ggplot2 ropensci. questions suggestions guide, please feel free contact package maintainer.","code":""},{"path":"/CONTRIBUTING.html","id":"editor","dir":"","previous_headings":"","what":"Editor","title":"Contributing to ggalluvial development","text":"Small edits comments, documentation, non-code files may made using GitHub file editor. edit roxygen2 documentation, make changes source file R/<topic>.r, line begins #', rather documentation file man/<topic>.Rd. guidance roxygen2 documentation, see chapter online book R packages.","code":""},{"path":"/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing to ggalluvial development","text":"Questions, possible bugs, feature requests, open-ended issues may raised issues GitHub. cases, issue consist two sections: description issue, reproducible example . reproducible example attach packages, include data, execute code: Attach relevant packages top example. Use small data set can conveniently get illustrates issue. data set, best way include example re-create using data.frame() constructor function. Another way follows: Execute dput(data) R, data data set. Copy output. Paste example package attachments. Use lines steps code feasible illustrate issue. Add comments key steps. guidance reproducible examples, see vignette reprex package.","code":""},{"path":"/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull requests","title":"Contributing to ggalluvial development","text":"Bug fixes, feature upgrades, substantive, self-contained changes may contributed via pull request. Unless previously discussed maintainer, please follow steps: Fork home repository (corybrunson/ggalluvial). Create new (local) branch make changes. appropriate, update documentation branch run functionality checks (e.g. using devtools package). Push branch fork open pull request home repository. maintainer(s), discuss (necessary) update pull request accepted decided . latter case, clear consistent reason provided maintainer(s). guidance pull request process, see contributing guidelines ggplot2.","code":""},{"path":"/articles/ggalluvial.html","id":"alluvial-plots","dir":"Articles","previous_headings":"","what":"Alluvial plots","title":"Alluvial Plots in ggplot2","text":"’s quintessential alluvial plot:  next section details elements image encode information underlying dataset. now, use image point reference define following elements typical alluvial plot: axis dimension (variable) along data vertically arranged fixed horizontal position. plot uses three categorical axes: Class, Sex, Age. groups axis depicted opaque blocks called strata. example, Class axis contains four strata: 1st, 2nd, 3rd, Crew. Horizontal (x-) splines called alluvia span width plot. plot, alluvium corresponds fixed value axis variable, indicated vertical position axis, well Survived variable, indicated fill color. segments alluvia pairs adjacent axes flows. alluvia intersect strata lodes. lodes visualized plot, can inferred filled rectangles extending flows strata end plot connecting flows either side center stratum. examples next section demonstrate, elements incorporated alluvial plot depends underlying data structured creator wants plot communicate.","code":""},{"path":"/articles/ggalluvial.html","id":"alluvial-data","dir":"Articles","previous_headings":"","what":"Alluvial data","title":"Alluvial Plots in ggplot2","text":"{ggalluvial} recognizes two formats “alluvial data”, treated detail following subsections, basically correspond “wide” “long” formats categorical repeated measures data. third, tabular (array), form popular storing data multiple categorical dimensions, Titanic UCBAdmissions datasets.1 consistency tidy data principles {ggplot2} conventions, {ggalluvial} accept tabular input; base::.data.frame() converts array acceptable data frame.","code":""},{"path":"/articles/ggalluvial.html","id":"alluvia-wide-format","dir":"Articles","previous_headings":"Alluvial data","what":"Alluvia (wide) format","title":"Alluvial Plots in ggplot2","text":"wide format reflects visual arrangement alluvial plot, “untwisted”: row corresponds cohort observations take specific value variable, variable column. additional column contains quantity row, e.g. number observational units cohort, may used control heights strata.2 Basically, wide format consists one row per alluvium. format base function .data.frame() transforms frequency table, instance 3-dimensional UCBAdmissions dataset: format inherited first release {ggalluvial}, modeled usage {alluvial}: user declares number axis variables, stat_alluvium() stat_stratum() recognize process consistent way:3  important feature plots meaningfulness vertical axis: gaps inserted strata, total height plot reflects cumulative quantity observations. plots produced {ggalluvial} conform (somewhat; keep reading) “grammar graphics” principles {ggplot2}, prevents users producing “free-floating” visualizations like Sankey diagrams showcased .4 {ggalluvial} parameters native {ggplot2} functionality can also produce parallel sets plots, illustrated using HairEyeColor dataset:56  (warning due “Hair” “Eye” axes value “Brown” common.) format functionality useful many applications retained future versions. also involve conspicuous deviations {ggplot2} norms: axis[0-9]* position aesthetics non-standard: explicit set parameters family based regular expression pattern; least one, specific one, required. stat_alluvium() ignores argument group aesthetic; instead, StatAlluvium$compute_panel() uses group link rows internally-transformed dataset correspond alluvium. horizontal axis must manually corrected (using scale_x_discrete() scale_x_continuous()) reflect implicit categorical variable identifying axis. Furthermore, format aesthetics like fill necessarily fixed alluvium; , example, change axis axis according value taken . means , although can reproduce branching-tree structure parallel sets, format used produce alluvial plots color schemes featured (“Controlling colors”), “reset” axis. Note also stratum variable produced stat_stratum() (called geom_text()) computed statistical transformation must recovered using after_stat() calculated aesthetic.","code":"head(as.data.frame(UCBAdmissions), n = 12) ##       Admit Gender Dept Freq ## 1  Admitted   Male    A  512 ## 2  Rejected   Male    A  313 ## 3  Admitted Female    A   89 ## 4  Rejected Female    A   19 ## 5  Admitted   Male    B  353 ## 6  Rejected   Male    B  207 ## 7  Admitted Female    B   17 ## 8  Rejected Female    B    8 ## 9  Admitted   Male    C  120 ## 10 Rejected   Male    C  205 ## 11 Admitted Female    C  202 ## 12 Rejected Female    C  391 is_alluvia_form(as.data.frame(UCBAdmissions), axes = 1:3, silent = TRUE) ## [1] TRUE ggplot(as.data.frame(UCBAdmissions),        aes(y = Freq, axis1 = Gender, axis2 = Dept)) +   geom_alluvium(aes(fill = Admit), width = 1/12) +   geom_stratum(width = 1/12, fill = \"black\", color = \"grey\") +   geom_label(stat = \"stratum\", aes(label = after_stat(stratum))) +   scale_x_discrete(limits = c(\"Gender\", \"Dept\"), expand = c(.05, .05)) +   scale_fill_brewer(type = \"qual\", palette = \"Set1\") +   ggtitle(\"UC Berkeley admissions and rejections, by sex and department\") ggplot(as.data.frame(HairEyeColor),        aes(y = Freq,            axis1 = Hair, axis2 = Eye, axis3 = Sex)) +   geom_alluvium(aes(fill = Eye),                 width = 1/8, knot.pos = 0, reverse = FALSE) +   scale_fill_manual(values = c(Brown = \"#70493D\", Hazel = \"#E2AC76\",                                Green = \"#3F752B\", Blue = \"#81B0E4\")) +   guides(fill = \"none\") +   geom_stratum(alpha = .25, width = 1/8, reverse = FALSE) +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum)),             reverse = FALSE) +   scale_x_continuous(breaks = 1:3, labels = c(\"Hair\", \"Eye\", \"Sex\")) +   coord_flip() +   ggtitle(\"Eye colors of 592 subjects, by sex and hair color\") ## Warning in to_lodes_form(data = data, axes = axis_ind, discern = ## params$discern): Some strata appear at multiple axes. ## Warning in to_lodes_form(data = data, axes = axis_ind, discern = ## params$discern): Some strata appear at multiple axes. ## Warning in to_lodes_form(data = data, axes = axis_ind, discern = ## params$discern): Some strata appear at multiple axes."},{"path":"/articles/ggalluvial.html","id":"lodes-long-format","dir":"Articles","previous_headings":"Alluvial data","what":"Lodes (long) format","title":"Alluvial Plots in ggplot2","text":"long format recognized {ggalluvial} contains one row per lode, can understood result “gathering” (deprecated {dplyr} sense) “pivoting” (Microsoft Excel current {dplyr} sense) axis columns dataset alluvia format key-value pair columns encoding axis key stratum value. format requires additional indexing column links rows corresponding common cohort, .e. lodes single alluvium: functions convert data wide (alluvia) long (lodes) format include several parameters help preserve ancillary information. See help(\"alluvial-data\") examples. stat geom can receive data format using different set positional aesthetics, also specific {ggalluvial}: x, “key” variable indicating axis row corresponds, arranged along horizontal axis; stratum, “value” taken axis variable indicated x; alluvium, indexing scheme links rows single alluvium. Heights can vary axis axis, allowing users produce bump charts like showcased .7 cases, strata contain information alluvia often plotted. convenience, stat_alluvium() stat_flow() accept arguments x alluvium even none given stratum.8 example, can group countries Refugees dataset region, order compare refugee volumes different scales:  format allows us assign aesthetics change axis axis along alluvium, useful repeated measures datasets. requires generating separate graphical object flow, implemented geom_flow(). plot uses set (changes ) students’ academic curricula course several semesters. Since geom_flow() calls stat_flow() default (see next example), override stat_alluvium() order track student across semesters:  stratum heights y unspecified, row given unit height. example demonstrates one way {ggalluvial} handles missing data. alternative set parameter na.rm TRUE.9 Missing data handling (specifically, order strata) also depends whether stratum variable character factor/numeric. Finally, lode format gives us option aggregate flows adjacent axes, may appropriate transitions adjacent axes primary importance. can demonstrate option data influenza vaccination surveys conducted RAND American Life Panel. data, including one question three surveys, aggregated response profile: “subject” (mapped alluvium) actually represents cohort subjects responded way three questions, size cohort (mapped y) recorded “freq”.  plot ignores continuity flows axes. “memoryless” statistical transformation yields less cluttered plot, one flow proceeds stratum one axis stratum next, cost able track cohort across entire plot.","code":"UCB_lodes <- to_lodes_form(as.data.frame(UCBAdmissions),                            axes = 1:3,                            id = \"Cohort\") head(UCB_lodes, n = 12) ##    Freq Cohort     x  stratum ## 1   512      1 Admit Admitted ## 2   313      2 Admit Rejected ## 3    89      3 Admit Admitted ## 4    19      4 Admit Rejected ## 5   353      5 Admit Admitted ## 6   207      6 Admit Rejected ## 7    17      7 Admit Admitted ## 8     8      8 Admit Rejected ## 9   120      9 Admit Admitted ## 10  205     10 Admit Rejected ## 11  202     11 Admit Admitted ## 12  391     12 Admit Rejected is_lodes_form(UCB_lodes, key = x, value = stratum, id = Cohort, silent = TRUE) ## [1] TRUE data(Refugees, package = \"alluvial\") country_regions <- c(   Afghanistan = \"Middle East\",   Burundi = \"Central Africa\",   `Congo DRC` = \"Central Africa\",   Iraq = \"Middle East\",   Myanmar = \"Southeast Asia\",   Palestine = \"Middle East\",   Somalia = \"Horn of Africa\",   Sudan = \"Central Africa\",   Syria = \"Middle East\",   Vietnam = \"Southeast Asia\" ) Refugees$region <- country_regions[Refugees$country] ggplot(data = Refugees,        aes(x = year, y = refugees, alluvium = country)) +   geom_alluvium(aes(fill = country, colour = country),                 alpha = .75, decreasing = FALSE, outline.type = \"upper\") +   scale_x_continuous(breaks = seq(2003, 2013, 2)) +   theme_bw() +   theme(axis.text.x = element_text(angle = -30, hjust = 0)) +   scale_fill_brewer(type = \"qual\", palette = \"Set3\") +   scale_color_brewer(type = \"qual\", palette = \"Set3\") +   facet_wrap(~ region, scales = \"fixed\") +   ggtitle(\"refugee volume by country and region of origin\") data(majors) majors$curriculum <- as.factor(majors$curriculum) ggplot(majors,        aes(x = semester, stratum = curriculum, alluvium = student,            fill = curriculum, label = curriculum)) +   scale_fill_brewer(type = \"qual\", palette = \"Set2\") +   geom_flow(stat = \"alluvium\", lode.guidance = \"frontback\",             color = \"darkgray\") +   geom_stratum() +   theme(legend.position = \"bottom\") +   ggtitle(\"student curricula across several semesters\") data(vaccinations) vaccinations <- transform(vaccinations,                           response = factor(response, rev(levels(response)))) ggplot(vaccinations,        aes(x = survey, stratum = response, alluvium = subject,            y = freq,            fill = response, label = response)) +   scale_x_discrete(expand = c(.1, .1)) +   geom_flow() +   geom_stratum(alpha = .5) +   geom_text(stat = \"stratum\", size = 3) +   theme(legend.position = \"none\") +   ggtitle(\"vaccination survey responses at three points in time\")"},{"path":"/articles/ggalluvial.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Alluvial Plots in ggplot2","text":"","code":"sessioninfo::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.4.2 (2024-10-31) ##  os       macOS Sonoma 14.4.1 ##  system   aarch64, darwin20 ##  ui       X11 ##  language en ##  collate  en_US.UTF-8 ##  ctype    en_US.UTF-8 ##  tz       America/New_York ##  date     2025-06-12 ##  pandoc   2.19 @ /opt/homebrew/bin/ (via rmarkdown) ##  quarto   NA ##  ## ─ Packages ─────────────────────────────────────────────────────────────────── ##  package      * version date (UTC) lib source ##  bslib          0.9.0   2025-01-30 [2] CRAN (R 4.4.1) ##  cachem         1.1.0   2024-05-16 [2] CRAN (R 4.4.1) ##  cli            3.6.5   2025-04-23 [2] CRAN (R 4.4.1) ##  desc           1.4.3   2023-12-10 [2] CRAN (R 4.4.1) ##  digest         0.6.37  2024-08-19 [2] CRAN (R 4.4.1) ##  dplyr          1.1.4   2023-11-17 [2] CRAN (R 4.4.0) ##  evaluate       1.0.3   2025-01-10 [2] CRAN (R 4.4.1) ##  farver         2.1.2   2024-05-13 [2] CRAN (R 4.4.1) ##  fastmap        1.2.0   2024-05-15 [2] CRAN (R 4.4.1) ##  fs             1.6.6   2025-04-12 [2] CRAN (R 4.4.1) ##  generics       0.1.4   2025-05-09 [2] CRAN (R 4.4.1) ##  ggalluvial   * 0.12.5  2025-06-12 [1] local ##  ggplot2      * 3.5.2   2025-04-09 [2] CRAN (R 4.4.1) ##  glue           1.8.0   2024-09-30 [2] CRAN (R 4.4.1) ##  gtable         0.3.6   2024-10-25 [2] CRAN (R 4.4.1) ##  htmltools      0.5.8.1 2024-04-04 [2] CRAN (R 4.4.1) ##  htmlwidgets    1.6.4   2023-12-06 [2] CRAN (R 4.4.0) ##  jquerylib      0.1.4   2021-04-26 [2] CRAN (R 4.4.0) ##  jsonlite       2.0.0   2025-03-27 [2] CRAN (R 4.4.1) ##  knitr          1.50    2025-03-16 [2] CRAN (R 4.4.1) ##  labeling       0.4.3   2023-08-29 [2] CRAN (R 4.4.1) ##  lifecycle      1.0.4   2023-11-07 [2] CRAN (R 4.4.1) ##  magrittr       2.0.3   2022-03-30 [2] CRAN (R 4.4.1) ##  pillar         1.10.2  2025-04-05 [2] CRAN (R 4.4.1) ##  pkgconfig      2.0.3   2019-09-22 [2] CRAN (R 4.4.1) ##  pkgdown        2.1.2   2025-04-28 [2] CRAN (R 4.4.1) ##  purrr          1.0.4   2025-02-05 [2] CRAN (R 4.4.1) ##  R6             2.6.1   2025-02-15 [2] CRAN (R 4.4.1) ##  ragg           1.4.0   2025-04-10 [2] CRAN (R 4.4.1) ##  RColorBrewer   1.1-3   2022-04-03 [2] CRAN (R 4.4.1) ##  rlang          1.1.6   2025-04-11 [2] CRAN (R 4.4.1) ##  rmarkdown      2.29    2024-11-04 [2] CRAN (R 4.4.1) ##  sass           0.4.10  2025-04-11 [2] CRAN (R 4.4.1) ##  scales         1.4.0   2025-04-24 [2] CRAN (R 4.4.1) ##  sessioninfo    1.2.3   2025-02-05 [2] CRAN (R 4.4.1) ##  systemfonts    1.2.3   2025-04-30 [2] CRAN (R 4.4.1) ##  textshaping    1.0.1   2025-05-01 [2] CRAN (R 4.4.1) ##  tibble         3.2.1   2023-03-20 [2] CRAN (R 4.4.0) ##  tidyr          1.3.1   2024-01-24 [2] CRAN (R 4.4.1) ##  tidyselect     1.2.1   2024-03-11 [2] CRAN (R 4.4.0) ##  vctrs          0.6.5   2023-12-01 [2] CRAN (R 4.4.0) ##  withr          3.0.2   2024-10-28 [2] CRAN (R 4.4.1) ##  xfun           0.52    2025-04-02 [2] CRAN (R 4.4.1) ##  yaml           2.3.10  2024-07-26 [2] CRAN (R 4.4.1) ##  ##  [1] /private/var/folders/4p/3cy0qmp15x9216qsqhh84kzm0000gn/T/Rtmpys5FaI/temp_libpath178905dc69195 ##  [2] /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library ##  * ── Packages attached to the search path. ##  ## ──────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/labels.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Labeling small strata","text":"brief vignette uses vaccinations dataset included {ggalluvial}. technical introduction, order levels reversed intuitive. Objects {ggplot2} extensions accessed via :: :::.","code":"knitr::opts_chunk$set(fig.width = 6, fig.height = 4, fig.align = \"center\") library(ggalluvial) ## Loading required package: ggplot2 data(vaccinations) vaccinations <- transform(vaccinations,                           response = factor(response, rev(levels(response))))"},{"path":"/articles/labels.html","id":"problem","dir":"Articles","previous_headings":"","what":"Problem","title":"Labeling small strata","text":"issue table: Strata helpful ’re overlaid text labels. Yet strata often vary height, labels length, degree fitting text inside strata uniform size renders illegible. principle, user treat size variable aesthetic manually fit text strata, cumbersome, doesn’t help anyway cases large text needed. illustrate problem, check plot . ’s means egregious case, ’ll . (practical example, see question StackOverflow, prompted vignette.)","code":"ggplot(vaccinations,        aes(x = survey, stratum = response, alluvium = subject, y = freq,            fill = response, label = response)) +   scale_x_discrete(expand = c(.1, 0)) +   geom_flow(width = 1/4) +   geom_stratum(alpha = .5, width = 1/4) +   geom_text(stat = \"stratum\", size = 4) +   theme(legend.position = \"none\") +   ggtitle(\"vaccination survey responses\", \"labeled using `geom_text()`\")"},{"path":"/articles/labels.html","id":"fix","dir":"Articles","previous_headings":"Problem","what":"Fix","title":"Labeling small strata","text":"One option simply omit labels don’t fit within strata. response issue, v0.9.2 includes parameters stat_stratum() exclude strata outside specified height range; use omit rectangles , can used tandem geom_text() shirk problem, least labels concise:  useful fix cases. Still, goal publication-ready graphic, reaffirms need adaptable elegant solutions. Fortunately, two wonderful packages deliver , shall say, flowing colors.","code":"ggplot(vaccinations,        aes(x = survey, stratum = response, alluvium = subject, y = freq,            fill = response, label = response)) +   scale_x_discrete(expand = c(.1, 0)) +   geom_flow(width = 1/4) +   geom_stratum(alpha = .5, width = 1/4) +   geom_text(stat = \"stratum\", size = 4, min.y = 100) +   theme(legend.position = \"none\") +   ggtitle(     \"vaccination survey responses\",     \"labeled using `geom_text()` with `min.y = 100`\"   )"},{"path":"/articles/labels.html","id":"solutions","dir":"Articles","previous_headings":"","what":"Solutions","title":"Labeling small strata","text":"Two {ggplot2} extensions well-suited problem: {ggrepel} {ggfittext}. provide new geom layers use output existing stat layers situate text: ggrepel::geom_text_repel() takes aesthetics ggplot2::geom_text(), namely x, y, label. contrast, ggfittext::geom_fit_text() specifically requires label also needs enough information determine rectangle contain text. can encoded xmin xmax x width horizontal direction, ymin ymax y height vertical direction. Conveniently, ggalluvial::stat_stratum() produces enough information geoms, including x, xmin, xmax, vertical counterparts. can gleaned ggproto objects construct layers: reached specific solutions trial error. may best tricks cases, demonstrate packages can . many examples, see respective package vignettes: {ggrepel}, {ggfittext}.","code":"print(ggrepel::GeomTextRepel$required_aes) ## [1] \"x\"     \"y\"     \"label\" print(ggfittext:::GeomFitText$required_aes) ## [1] \"label\" print(ggfittext:::GeomFitText$setup_data) ## <ggproto method> ##   <Wrapper function> ##     function (...)  ## setup_data(...) ##  ##   <Inner function (f)> ##     function (data, params)  ## { ##     if (!(!is.null(data$xmin) & !is.null(data$xmax) | !is.null(data$x))) { ##         cli::cli_abort(\"geom_fit_text needs either 'xmin' and 'xmax', or 'x'\") ##     } ##     if (!(!is.null(data$ymin) & !is.null(data$ymax) | !is.null(data$y))) { ##         cli::cli_abort(\"geom_fit_text needs either 'ymin' and 'ymax', or 'y'\") ##     } ##     if ((!is.null(params$width)) & (!inherits(params$width, \"unit\"))) { ##         data$xmin <- data$x - params$width/2 ##         data$xmax <- data$x + params$width/2 ##     } ##     if ((!is.null(params$height)) & (!inherits(params$height,  ##         \"unit\"))) { ##         data$ymin <- data$y - params$height/2 ##         data$ymax <- data$y + params$height/2 ##     } ##     if (is.null(params$width) & is.null(data$xmin)) { ##         data$width <- ggplot2::resolution(data$x, FALSE) * 0.9 ##         data$xmin <- data$x - data$width/2 ##         data$xmax <- data$x + data$width/2 ##         data$width <- NULL ##     } ##     if (is.null(params$height) & is.null(data$ymin)) { ##         data$height <- ggplot2::resolution(data$y, FALSE) * 0.9 ##         data$ymin <- data$y - data$height/2 ##         data$ymax <- data$y + data$height/2 ##         data$height <- NULL ##     } ##     if (!is.null(params$formatter)) { ##         if (!is.function(params$formatter)) { ##             cli::cli_abort(\"`formatter` must be a function\") ##         } ##         formatted_labels <- vapply(data$label, params$formatter,  ##             character(1), USE.NAMES = FALSE) ##         if ((!length(formatted_labels) == length(data$label)) |  ##             (!is.character(formatted_labels))) { ##             cli::cli_abort(\"`formatter` must produce a character vector of same length as input\") ##         } ##         data$label <- formatted_labels ##     } ##     data$flip <- params$flip ##     data ## } print(StatStratum$compute_panel) ## <ggproto method> ##   <Wrapper function> ##     function (...)  ## compute_panel(..., self = self) ##  ##   <Inner function (f)> ##     function (self, data, scales, decreasing = NULL, reverse = NULL,  ##     absolute = NULL, discern = FALSE, distill = \"first\", negate.strata = NULL,  ##     infer.label = FALSE, label.strata = NULL, min.y = NULL, max.y = NULL,  ##     min.height = NULL, max.height = NULL)  ## { ##     if (is.null(decreasing))  ##         decreasing <- ggalluvial_opt(\"decreasing\") ##     if (is.null(reverse))  ##         reverse <- ggalluvial_opt(\"reverse\") ##     if (is.null(absolute))  ##         absolute <- ggalluvial_opt(\"absolute\") ##     if (!is.null(label.strata)) { ##         defunct_parameter(\"label.strata\", msg = \"use `aes(label = after_stat(stratum))`.\") ##         infer.label <- label.strata ##     } ##     if (infer.label) { ##         deprecate_parameter(\"infer.label\", msg = \"Use `aes(label = after_stat(stratum))`.\") ##         if (is.null(data$label)) { ##             data$label <- data$stratum ##         } ##         else { ##             warning(\"Aesthetic `label` is specified, \", \"so parameter `infer.label` will be ignored.\") ##         } ##     } ##     diff_aes <- intersect(c(.color_diff_aesthetics, .text_aesthetics),  ##         names(data)) ##     data$yneg <- data$y < 0 ##     data$lode <- data$alluvium ##     distill <- distill_fun(distill) ##     weight <- data$weight ##     data$weight <- NULL ##     if (is.null(weight))  ##         weight <- 1 ##     data$n <- weight ##     data$count <- data$y * weight ##     by_vars <- c(\"x\", \"yneg\", \"stratum\") ##     only_vars <- c(diff_aes) ##     sum_vars <- c(\"y\", \"n\", \"count\") ##     if (!is.null(data$lode)) { ##         agg_lode <- stats::aggregate(data[, \"lode\", drop = FALSE],  ##             data[, by_vars], distill) ##     } ##     if (length(only_vars) > 0) { ##         agg_only <- stats::aggregate(data[, only_vars, drop = FALSE],  ##             data[, by_vars], only) ##     } ##     data <- stats::aggregate(data[, sum_vars], data[, by_vars],  ##         sum) ##     if (!is.null(data$lode)) { ##         data <- merge(data, agg_lode) ##     } ##     if (length(only_vars) > 0) { ##         data <- merge(data, agg_only) ##     } ##     data <- subset(data, y != 0) ##     data <- deposit_data(data, decreasing, reverse, absolute) ##     x_sums <- tapply(abs(data$count), data$x, sum, na.rm = TRUE) ##     data$prop <- data$count/x_sums[match(as.character(data$x),  ##         names(x_sums))] ##     data <- data[with(data, order(deposit)), , drop = FALSE] ##     data$ycum <- NA ##     for (xx in unique(data$x)) { ##         for (yn in c(FALSE, TRUE)) { ##             ww <- which(data$x == xx & data$yneg == yn) ##             data$ycum[ww] <- cumulate(data$y[ww]) ##         } ##     } ##     data$ymin <- data$ycum - abs(data$y)/2 ##     data$ymax <- data$ycum + abs(data$y)/2 ##     data$y <- data$ycum ##     data$yneg <- NULL ##     data$ycum <- NULL ##     if (!is.null(min.height)) { ##         deprecate_parameter(\"min.height\", \"min.y\") ##         min.y <- min.height ##     } ##     if (!is.null(max.height)) { ##         deprecate_parameter(\"max.height\", \"max.y\") ##         max.y <- max.height ##     } ##     if (!is.null(min.y))  ##         data <- subset(data, ymax - ymin >= min.y) ##     if (!is.null(max.y))  ##         data <- subset(data, ymax - ymin <= max.y) ##     data ## }"},{"path":"/articles/labels.html","id":"solution-1-ggrepel","dir":"Articles","previous_headings":"Solutions","what":"Solution 1: {ggrepel}","title":"Labeling small strata","text":"{ggrepel} often (experience) used repel text away symbols scatterplot, whatever directions prevent overlapping symbols . case, however, makes much sense align vertically fixed horizontal distance (nudge_x) away strata repel vertically (direction = \"y\") just enough print without overlap. takes extra bit effort render text strata first (last) axis, result worth .","code":"ggplot(vaccinations,        aes(x = survey, stratum = response, alluvium = subject, y = freq,            fill = response)) +   scale_x_discrete(expand = c(.4, 0)) +   geom_flow(width = 1/4) +   geom_stratum(alpha = .5, width = 1/4) +   scale_linetype_manual(values = c(\"blank\", \"solid\")) +   ggrepel::geom_text_repel(     aes(label = ifelse(as.numeric(survey) == 1, as.character(response), NA)),     stat = \"stratum\", size = 4, direction = \"y\", nudge_x = -.5   ) +   ggrepel::geom_text_repel(     aes(label = ifelse(as.numeric(survey) == 3, as.character(response), NA)),     stat = \"stratum\", size = 4, direction = \"y\", nudge_x = .5   ) +   theme(legend.position = \"none\") +   ggtitle(\"vaccination survey responses\", \"labeled using `geom_text_repel()`\") ## Warning: Removed 8 rows containing missing values or values outside the scale range ## (`geom_text_repel()`). ## Removed 8 rows containing missing values or values outside the scale range ## (`geom_text_repel()`)."},{"path":"/articles/labels.html","id":"solution-2-ggfittext","dir":"Articles","previous_headings":"Solutions","what":"Solution 2: {ggfittext}","title":"Labeling small strata","text":"{ggfittext} simplicity : strata just rectangles, parameter specifications necessary fit text . One key parameter min.size, defaults 4 controls small text allowed get without omitted.  Note solution requires {ggfittext} v0.6.0.","code":"ggplot(vaccinations,        aes(x = survey, stratum = response, alluvium = subject, y = freq,            fill = response, label = response)) +   scale_x_discrete(expand = c(.1, 0)) +   geom_flow(width = 1/4) +   geom_stratum(alpha = .5, width = 1/4) +   ggfittext::geom_fit_text(stat = \"stratum\", width = 1/4, min.size = 3) +   theme(legend.position = \"none\") +   ggtitle(\"vaccination survey responses\", \"labeled using `geom_fit_text()`\")"},{"path":"/articles/labels.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Labeling small strata","text":"","code":"sessioninfo::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.4.2 (2024-10-31) ##  os       macOS Sonoma 14.4.1 ##  system   aarch64, darwin20 ##  ui       X11 ##  language en ##  collate  en_US.UTF-8 ##  ctype    en_US.UTF-8 ##  tz       America/New_York ##  date     2025-06-12 ##  pandoc   2.19 @ /opt/homebrew/bin/ (via rmarkdown) ##  quarto   NA ##  ## ─ Packages ─────────────────────────────────────────────────────────────────── ##  package      * version date (UTC) lib source ##  bslib          0.9.0   2025-01-30 [2] CRAN (R 4.4.1) ##  cachem         1.1.0   2024-05-16 [2] CRAN (R 4.4.1) ##  cli            3.6.5   2025-04-23 [2] CRAN (R 4.4.1) ##  desc           1.4.3   2023-12-10 [2] CRAN (R 4.4.1) ##  digest         0.6.37  2024-08-19 [2] CRAN (R 4.4.1) ##  dplyr          1.1.4   2023-11-17 [2] CRAN (R 4.4.0) ##  evaluate       1.0.3   2025-01-10 [2] CRAN (R 4.4.1) ##  farver         2.1.2   2024-05-13 [2] CRAN (R 4.4.1) ##  fastmap        1.2.0   2024-05-15 [2] CRAN (R 4.4.1) ##  fs             1.6.6   2025-04-12 [2] CRAN (R 4.4.1) ##  generics       0.1.4   2025-05-09 [2] CRAN (R 4.4.1) ##  ggalluvial   * 0.12.5  2025-06-12 [1] local ##  ggfittext      0.10.2  2024-02-01 [2] CRAN (R 4.4.0) ##  ggplot2      * 3.5.2   2025-04-09 [2] CRAN (R 4.4.1) ##  ggrepel        0.9.6   2024-09-07 [2] CRAN (R 4.4.1) ##  glue           1.8.0   2024-09-30 [2] CRAN (R 4.4.1) ##  gtable         0.3.6   2024-10-25 [2] CRAN (R 4.4.1) ##  htmltools      0.5.8.1 2024-04-04 [2] CRAN (R 4.4.1) ##  htmlwidgets    1.6.4   2023-12-06 [2] CRAN (R 4.4.0) ##  jquerylib      0.1.4   2021-04-26 [2] CRAN (R 4.4.0) ##  jsonlite       2.0.0   2025-03-27 [2] CRAN (R 4.4.1) ##  knitr          1.50    2025-03-16 [2] CRAN (R 4.4.1) ##  labeling       0.4.3   2023-08-29 [2] CRAN (R 4.4.1) ##  lifecycle      1.0.4   2023-11-07 [2] CRAN (R 4.4.1) ##  magrittr       2.0.3   2022-03-30 [2] CRAN (R 4.4.1) ##  pillar         1.10.2  2025-04-05 [2] CRAN (R 4.4.1) ##  pkgconfig      2.0.3   2019-09-22 [2] CRAN (R 4.4.1) ##  pkgdown        2.1.2   2025-04-28 [2] CRAN (R 4.4.1) ##  purrr          1.0.4   2025-02-05 [2] CRAN (R 4.4.1) ##  R6             2.6.1   2025-02-15 [2] CRAN (R 4.4.1) ##  ragg           1.4.0   2025-04-10 [2] CRAN (R 4.4.1) ##  RColorBrewer   1.1-3   2022-04-03 [2] CRAN (R 4.4.1) ##  Rcpp           1.0.14  2025-01-12 [2] CRAN (R 4.4.1) ##  rlang          1.1.6   2025-04-11 [2] CRAN (R 4.4.1) ##  rmarkdown      2.29    2024-11-04 [2] CRAN (R 4.4.1) ##  sass           0.4.10  2025-04-11 [2] CRAN (R 4.4.1) ##  scales         1.4.0   2025-04-24 [2] CRAN (R 4.4.1) ##  sessioninfo    1.2.3   2025-02-05 [2] CRAN (R 4.4.1) ##  stringi        1.8.7   2025-03-27 [2] CRAN (R 4.4.1) ##  systemfonts    1.2.3   2025-04-30 [2] CRAN (R 4.4.1) ##  textshaping    1.0.1   2025-05-01 [2] CRAN (R 4.4.1) ##  tibble         3.2.1   2023-03-20 [2] CRAN (R 4.4.0) ##  tidyr          1.3.1   2024-01-24 [2] CRAN (R 4.4.1) ##  tidyselect     1.2.1   2024-03-11 [2] CRAN (R 4.4.0) ##  vctrs          0.6.5   2023-12-01 [2] CRAN (R 4.4.0) ##  withr          3.0.2   2024-10-28 [2] CRAN (R 4.4.1) ##  xfun           0.52    2025-04-02 [2] CRAN (R 4.4.1) ##  yaml           2.3.10  2024-07-26 [2] CRAN (R 4.4.1) ##  ##  [1] /private/var/folders/4p/3cy0qmp15x9216qsqhh84kzm0000gn/T/Rtmpys5FaI/temp_libpath178905dc69195 ##  [2] /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library ##  * ── Packages attached to the search path. ##  ## ──────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/order-rectangles.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"The Order of the Rectangles","text":"functionality discussed vignette exported {ggalluvial}. ’ll also need toy data set play . conjured data frame toy nearly small possible complex enough illustrate positional controls: subjects classified categories collection point also members fixed classes. ’s {ggalluvial} visualizes data default settings:","code":"knitr::opts_chunk$set(fig.width = 6, fig.height = 3, fig.align = \"center\") library(ggalluvial) ## Loading required package: ggplot2 # toy data set set.seed(0) toy <- data.frame(   subject = rep(LETTERS[1:5], times = 4),   collection = rep(1:4, each  = 5),   category = rep(     sample(c(\"X\", \"Y\"), 16, replace = TRUE),     rep(c(1, 2, 1, 1), times = 4)   ),   class = c(\"one\", \"one\", \"one\", \"two\", \"two\") ) print(toy) ##    subject collection category class ## 1        A          1        Y   one ## 2        B          1        X   one ## 3        C          1        X   one ## 4        D          1        Y   two ## 5        E          1        X   two ## 6        A          2        X   one ## 7        B          2        Y   one ## 8        C          2        Y   one ## 9        D          2        X   two ## 10       E          2        X   two ## 11       A          3        X   one ## 12       B          3        Y   one ## 13       C          3        Y   one ## 14       D          3        Y   two ## 15       E          3        X   two ## 16       A          4        X   one ## 17       B          4        X   one ## 18       C          4        X   one ## 19       D          4        X   two ## 20       E          4        X   two ggplot(toy, aes(x = collection, stratum = category, alluvium = subject)) +   geom_alluvium(aes(fill = class)) +   geom_stratum()"},{"path":"/articles/order-rectangles.html","id":"motivations","dir":"Articles","previous_headings":"","what":"Motivations","title":"The Order of the Rectangles","text":"amount control stat layers stat_alluvial() stat_flow() exert positional aesthetics graphical objects (grobs) unusual, standards {ggplot2} many extensions. layered grammar graphics framework, role statistical transformation usually summarize original data, example binning (stat_bin()) calculating quantiles (stat_qq()). transformed data sent geom layers positioning. positions grobs may adjusted statistical transformation, example points jittered (geom_jitter()), numerical data communicated plot still product stat. {ggalluvial}, stat layers exert slightly control. one thing, transformation sophisticated single value fixed-length vector, mean, standard deviation, five-number summary. Instead, values y (default 1) within collection , reordering, transformed using cumsum() additional arithmetic obtain coordinates centers y lower upper limits ymin ymax strata representing categories. Additionally, reordering lodes within collection relies hierarchy sorting variables, based strata nearby axes well present one , optionally, values differentiation aesthetics like fill. hierarchy invoked depends choices several plotting parameters (decreasing, reverse, absolute). Thus, results statistical transformations intrinsically meaningful others subject much intervention user. transformations produced coordinates geom layers use position rectangles splines constitute plot. two key reasons division labor: coordinates returned stat layers can coupled multiple geom layers. example, four geoms can couple alluvium stat. Moreover, showcased examples, stats can also meaningfully couple exogenous geoms like text, pointrange, errorbar. (principle, geoms also couple exogenous stats, haven’t done seen done wild.) Different parameters control calculations coordinates (e.g. aes.bind cement.alluvia) rendering graphical elements (width, knot.pos, aes.flow), makes intuitive sense handle separately. example, heights strata lodes convey information underlying data, whereas widths arbitrary. (data provided alluvia format, Stat*$setup_data() converts lodes format preparation main transformation. can done manually using exported conversion functions, vignette assume data already lodes format.)","code":""},{"path":"/articles/order-rectangles.html","id":"positioning-strata","dir":"Articles","previous_headings":"","what":"Positioning strata","title":"The Order of the Rectangles","text":"stat layer demarcates one stack data collection point one rectangle within stack (non-empty) category.1 {ggalluvial} terms, collection points axes rectangles strata lodes. generate sequence stacked bar plots connecting flows, aesthetics x (standard) stratum (custom) required: Comparing output toy, notice first data aggregated: distinct combination x stratum occupies one row. x encodes axes subject layers specific positional aesthetic, e.g. scale_x_*() transformations. ymin ymax lower upper bounds rectangles, y vertical centers. stacked rectangle begins one ends, heights numbers subjects (totals y values, y passed numerical variable) take corresponding category value corresponding collection point. ’s plot strata-transformation yields:  vignette, ’ll use stat_*() functions add layers, parameters control behavior accessible via tab-completion.","code":"# collection point and category variables only data <- structure(toy[, 2:3], names = c(\"x\", \"stratum\")) # required fields for stat transformations data$y <- 1 data$PANEL <- 1 # stratum transformation StatStratum$compute_panel(data) ##   x stratum   y n count deposit prop ymin ymax ## 2 1       Y 1.0 2     2       1  0.4    0    2 ## 1 1       X 3.5 3     3       2  0.6    2    5 ## 4 2       Y 1.0 2     2       3  0.4    0    2 ## 3 2       X 3.5 3     3       4  0.6    2    5 ## 6 3       Y 1.5 3     3       5  0.6    0    3 ## 5 3       X 4.0 2     2       6  0.4    3    5 ## 7 4       X 2.5 5     5       7  1.0    0    5 ggplot(toy, aes(x = collection, stratum = category)) +   stat_stratum() +   stat_stratum(geom = \"text\", aes(label = category))"},{"path":"/articles/order-rectangles.html","id":"reversing-the-strata","dir":"Articles","previous_headings":"Positioning strata","what":"Reversing the strata","title":"The Order of the Rectangles","text":"Within axis, stratum defaults reverse order bars proceed original order top bottom. can overridden setting reverse = FALSE stat_stratum():  Warning: caveat , reverse declared layer, must declared every layer, lest layers misaligned. includes alluvium, flow, lode layers, since graphical elements organized within bounds strata.","code":"# stratum transformation with strata in original order StatStratum$compute_panel(data, reverse = FALSE) ##   x stratum   y n count deposit prop ymin ymax ## 1 1       X 1.5 3     3       1  0.6    0    3 ## 2 1       Y 4.0 2     2       2  0.4    3    5 ## 3 2       X 1.5 3     3       3  0.6    0    3 ## 4 2       Y 4.0 2     2       4  0.4    3    5 ## 5 3       X 1.0 2     2       5  0.4    0    2 ## 6 3       Y 3.5 3     3       6  0.6    2    5 ## 7 4       X 2.5 5     5       7  1.0    0    5 ggplot(toy, aes(x = collection, stratum = category)) +   stat_stratum(reverse = FALSE) +   stat_stratum(geom = \"text\", aes(label = category), reverse = FALSE)"},{"path":"/articles/order-rectangles.html","id":"sorting-the-strata-by-size","dir":"Articles","previous_headings":"Positioning strata","what":"Sorting the strata by size","title":"The Order of the Rectangles","text":"strata defined character factor variable, default order variable (lexicographic former case). can overridden decreasing parameter, defaults NA can set TRUE FALSE arrange strata decreasing increasing order y direction:  Warning: caveat applies decreasing reverse: Make sure layers using alluvial stats passed values! Henceforth, ’ll use default (reverse categorical) ordering strata .","code":"# stratum transformation with strata in original order StatStratum$compute_panel(data, reverse = FALSE) ##   x stratum   y n count deposit prop ymin ymax ## 1 1       X 1.5 3     3       1  0.6    0    3 ## 2 1       Y 4.0 2     2       2  0.4    3    5 ## 3 2       X 1.5 3     3       3  0.6    0    3 ## 4 2       Y 4.0 2     2       4  0.4    3    5 ## 5 3       X 1.0 2     2       5  0.4    0    2 ## 6 3       Y 3.5 3     3       6  0.6    2    5 ## 7 4       X 2.5 5     5       7  1.0    0    5 ggplot(toy, aes(x = collection, stratum = category)) +   stat_stratum(decreasing = TRUE) +   stat_stratum(geom = \"text\", aes(label = category), decreasing = TRUE)"},{"path":[]},{"path":"/articles/order-rectangles.html","id":"alluvia-and-flows","dir":"Articles","previous_headings":"Positioning lodes within strata","what":"Alluvia and flows","title":"The Order of the Rectangles","text":"strata-plot, subject represented axis. Alluvia x-splines connect multiple representations subjects across axes. order avoid splines overlap axes, alluvium stat must stack alluvial cohorts—subsets subjects common profile across axes—within stratum. smaller cohort-specific rectangles lodes. calculation requires additional custom alluvium aesthetic, identifies common subjects across axes: transformed data now contain one row per cohort—instead per category—per collection point. vertical positional aesthetics describe lodes rather strata, group variable encodes alluvia (convenience geom layer, reason {ggalluvial} stat layers ignore variables passed group). ’s transformation translates alluvial plot began vignette, labeling subject alluvium intersection stratum:  flow stat differs alluvium stat allowing orders lodes within strata differ one side axis . Put differently, flow stat allows mixing axes, rather requiring case cohort follows continuous trajectory one end plot . result, flow plots often much less cluttered, trade-cases cohorts tracked . flow stat transformation yields one row per cohort per side per flow. intermediate axis appears twice data, incoming flow outgoing flow. (starting ending axes rows outgoing incoming flows, respectively.) flow version preceding alluvial plot, labeling side flow corresponding subject:  computed variable flow indicates whether row compute_panel() output corresponds flow axis; values used nudge labels toward respective flows (avoid overlap). Mismatches adjacent labels indicate lodes ordered differently either side stratum.","code":"# collection point, category, and subject variables data <- structure(toy[, 1:3], names = c(\"alluvium\", \"x\", \"stratum\")) # required fields for stat transformations data$y <- 1 data$PANEL <- 1 # alluvium transformation StatAlluvium$compute_panel(data) ##    x alluvium stratum   y PANEL lode n count deposit prop ymin ymax group ## 1  1        A       Y 1.5     1    A 1     1       1  0.2    1    2     1 ## 2  1        B       X 3.5     1    B 1     1       2  0.2    3    4     2 ## 3  1        C       X 2.5     1    C 1     1       2  0.2    2    3     3 ## 4  1        D       Y 0.5     1    D 1     1       1  0.2    0    1     4 ## 5  1        E       X 4.5     1    E 1     1       2  0.2    4    5     5 ## 6  2        A       X 3.5     1    A 1     1       4  0.2    3    4     1 ## 7  2        B       Y 1.5     1    B 1     1       3  0.2    1    2     2 ## 8  2        C       Y 0.5     1    C 1     1       3  0.2    0    1     3 ## 9  2        D       X 2.5     1    D 1     1       4  0.2    2    3     4 ## 10 2        E       X 4.5     1    E 1     1       4  0.2    4    5     5 ## 11 3        A       X 3.5     1    A 1     1       6  0.2    3    4     1 ## 12 3        B       Y 1.5     1    B 1     1       5  0.2    1    2     2 ## 13 3        C       Y 0.5     1    C 1     1       5  0.2    0    1     3 ## 14 3        D       Y 2.5     1    D 1     1       5  0.2    2    3     4 ## 15 3        E       X 4.5     1    E 1     1       6  0.2    4    5     5 ## 16 4        A       X 3.5     1    A 1     1       7  0.2    3    4     1 ## 17 4        B       X 1.5     1    B 1     1       7  0.2    1    2     2 ## 18 4        C       X 0.5     1    C 1     1       7  0.2    0    1     3 ## 19 4        D       X 2.5     1    D 1     1       7  0.2    2    3     4 ## 20 4        E       X 4.5     1    E 1     1       7  0.2    4    5     5 ggplot(toy, aes(x = collection, stratum = category, alluvium = subject)) +   stat_alluvium(aes(fill = class)) +   stat_stratum(alpha = .25) +   stat_alluvium(geom = \"text\", aes(label = subject)) # flow transformation StatFlow$compute_panel(data) ##    alluvium x stratum deposit flow   y n count lode group prop ymin ymax ## 3         2 1       Y       1 from 1.0 2     2    A     2  0.4    0    2 ## 1         1 1       X       2 from 3.0 2     2    B     1  0.4    2    4 ## 5         3 1       X       2 from 4.5 1     1    E     3  0.2    4    5 ## 2         1 2       Y       3   to 1.0 2     2    B     1  0.2    0    2 ## 4         2 2       X       4   to 3.0 2     2    A     2  0.2    2    4 ## 6         3 2       X       4   to 4.5 1     1    E     3  0.1    4    5 ## 7         4 2       Y       3 from 1.0 2     2    B     4  0.2    0    2 ## 9         5 2       X       4 from 2.5 1     1    D     5  0.1    2    3 ## 11        6 2       X       4 from 4.0 2     2    A     6  0.2    3    5 ## 8         4 3       Y       5   to 1.0 2     2    B     4  0.2    0    2 ## 10        5 3       Y       5   to 2.5 1     1    D     5  0.1    2    3 ## 12        6 3       X       6   to 4.0 2     2    A     6  0.2    3    5 ## 13        7 3       Y       5 from 1.5 3     3    B     7  0.3    0    3 ## 15        8 3       X       6 from 4.0 2     2    A     8  0.2    3    5 ## 14        7 4       X       7   to 1.5 3     3    B     7  0.6    0    3 ## 16        8 4       X       7   to 4.0 2     2    A     8  0.4    3    5 ggplot(toy, aes(x = collection, stratum = category, alluvium = subject)) +   stat_stratum() +   stat_flow(aes(fill = class)) +   stat_flow(geom = \"text\",             aes(label = subject, hjust = after_stat(flow) == \"to\"))"},{"path":"/articles/order-rectangles.html","id":"lode-guidance","dir":"Articles","previous_headings":"Positioning lodes within strata","what":"Lode guidance","title":"The Order of the Rectangles","text":"number strata axis grows, heterogeneous cases cohorts can produce highly complex alluvia messy plots. {ggalluvial} mitigates strategically arranging lodes—intersections alluvia strata—reduce crossings adjacent axes. strategy executed locally: axis (call index axis), order lodes guided several totally partially ordered variables. order priority: strata index axis strata axes index axis linked alluvia flows—namely, axes case alluvium, single adjacent axis case flow alluvia , .e. variable passed alluvium alluvium case, prioritization remaining axes determined lode guidance function. lode guidance function can passed lode.guidance parameter, defaults \"zigzag\". function puts nearest (adjacent) axes first, zigzags outward , initially (“zig”) direction closer extreme: Several alternative lode_*() functions available: \"zagzig\" behaves like \"zigzag\" except initially “zags” toward farther extreme. \"frontback\" \"backfront\" behave like \"zigzag\" extend completely one outward direction index axis . \"forward\" \"backward\" put remaining axes increasing decreasing order, regardless relative position index axis. Two alternatives illustrated :  difference \"backfront\" guidance \"zigzag\" guidance can seen order lodes \"Y\" stratum axis 3: Whereas \"zigzag\" minimized crossings axes 3 4, locating distinctive class-\"one\" case others, \"backfront\" minimized crossings axes 2 3 (axis 2 immediately axis 3), locating case others.  effect \"backward\" guidance keep right part plot tidy possible allowing left part become messy necessary. (\"forward\" opposite effect.)","code":"for (i in 1:4) print(lode_zigzag(4, i)) ## [1] 1 2 3 4 ## [1] 2 1 3 4 ## [1] 3 4 2 1 ## [1] 4 3 2 1 for (i in 1:4) print(lode_backfront(4, i)) ## [1] 1 2 3 4 ## [1] 2 1 3 4 ## [1] 3 2 1 4 ## [1] 4 3 2 1 ggplot(toy, aes(x = collection, stratum = category, alluvium = subject)) +   stat_alluvium(aes(fill = class), lode.guidance = \"backfront\") +   stat_stratum() +   stat_alluvium(geom = \"text\", aes(label = subject),                 lode.guidance = \"backfront\") for (i in 1:4) print(lode_backward(4, i)) ## [1] 1 4 3 2 ## [1] 2 4 3 1 ## [1] 3 4 2 1 ## [1] 4 3 2 1 ggplot(toy, aes(x = collection, stratum = category, alluvium = subject)) +   stat_alluvium(aes(fill = class), lode.guidance = \"backward\") +   stat_stratum() +   stat_alluvium(geom = \"text\", aes(label = subject),                 lode.guidance = \"backward\")"},{"path":"/articles/order-rectangles.html","id":"aesthetic-binding","dir":"Articles","previous_headings":"Positioning lodes within strata","what":"Aesthetic binding","title":"The Order of the Rectangles","text":"often makes sense bundle together cases cohorts fall common groups used assign differentiation aesthetics: commonly fill, also alpha, controls opacity fill colors, colour, linetype, size, control borders alluvia, flows, lodes. aes.bind parameter defaults \"none\", case aesthetics play role order lodes. Setting parameter \"flows\" prioritizes aesthetics strata axes alluvia index axis (effectively ordering flows axis aesthetic), setting \"alluvia\" prioritizes aesthetics strata axes (effectively ordering alluvia). toy example, stronger option results lodes within stratum sorted first class:  flexible option groups lodes class ’ve ordered according strata remaining axes:  Warning: addition parameters like reverse, aesthetic variables prioritized , overlaid alluvial layers must include aesthetics order. (can produce warnings aesthetics recognized geom.) Try removing fill = class text geom see risk posed neglecting check. Rather ordering lodes within, flow stat separately orders flows , stratum. (precludes corresponding \"alluvia\" option aes.bind.) default, flows ordered respect first orders strata present axis second adjacent axis. Setting aes.bind non-default option \"flows\" tells stat_flow() prioritize flow aesthetics strata index axis strata adjacent axis:  Note: aes.flow parameter tells geom_flow() flows inherit differentiation aesthetics adjacent axes—\"forward\" \"backward\". influence positions.","code":"ggplot(toy, aes(x = collection, stratum = category, alluvium = subject)) +   stat_alluvium(aes(fill = class, label = subject), aes.bind = \"alluvia\") +   stat_stratum() +   stat_alluvium(geom = \"text\", aes(fill = class, label = subject),                 aes.bind = \"alluvia\") ## Warning in stat_alluvium(aes(fill = class, label = subject), aes.bind = ## \"alluvia\"): Ignoring unknown aesthetics: label ## Warning in stat_alluvium(geom = \"text\", aes(fill = class, label = subject), : ## Ignoring unknown aesthetics: fill ggplot(toy, aes(x = collection, stratum = category, alluvium = subject)) +   stat_alluvium(aes(fill = class, label = subject), aes.bind = \"flows\") +   stat_stratum() +   stat_alluvium(geom = \"text\", aes(fill = class, label = subject),                 aes.bind = \"flows\") ## Warning in stat_alluvium(aes(fill = class, label = subject), aes.bind = ## \"flows\"): Ignoring unknown aesthetics: label ## Warning in stat_alluvium(geom = \"text\", aes(fill = class, label = subject), : ## Ignoring unknown aesthetics: fill ggplot(toy, aes(x = collection, stratum = category, alluvium = subject)) +   stat_flow(aes(fill = class, label = subject), aes.bind = \"flows\") +   stat_stratum() +   stat_flow(geom = \"text\",             aes(fill = class, label = subject,                 hjust = after_stat(flow) == \"to\"),             aes.bind = \"flows\") ## Warning in stat_flow(aes(fill = class, label = subject), aes.bind = \"flows\"): ## Ignoring unknown aesthetics: label ## Warning in stat_flow(geom = \"text\", aes(fill = class, label = subject, hjust = ## after_stat(flow) == : Ignoring unknown aesthetics: fill"},{"path":"/articles/order-rectangles.html","id":"manual-lode-ordering","dir":"Articles","previous_headings":"Positioning lodes within strata","what":"Manual lode ordering","title":"The Order of the Rectangles","text":"Finally, one may wish put lodes axis predefined order, subject located correct strata. can done passing data column order aesthetic. toy example, can pass vector puts cases order IDs data every axis:   Within stratum axis, cases now order top bottom.","code":"lode_ord <- rep(seq(5), times = 4) ggplot(toy, aes(x = collection, stratum = category, alluvium = subject)) +   stat_alluvium(aes(fill = class, order = lode_ord)) +   stat_stratum() +   stat_alluvium(geom = \"text\",                 aes(fill = class, order = lode_ord, label = subject)) ## Warning in stat_alluvium(aes(fill = class, order = lode_ord)): Ignoring ## unknown aesthetics: order ## Warning in stat_alluvium(geom = \"text\", aes(fill = class, order = lode_ord, : ## Ignoring unknown aesthetics: fill and order ggplot(toy, aes(x = collection, stratum = category, alluvium = subject)) +   stat_flow(aes(fill = class, order = lode_ord)) +   stat_stratum() +   stat_flow(geom = \"text\",             aes(fill = class, order = lode_ord, label = subject,                 hjust = after_stat(flow) == \"to\")) ## Warning in stat_flow(geom = \"text\", aes(fill = class, order = lode_ord, : ## Ignoring unknown aesthetics: fill"},{"path":"/articles/order-rectangles.html","id":"negative-strata","dir":"Articles","previous_headings":"","what":"Negative strata","title":"The Order of the Rectangles","text":"response elegant real-world use case, {ggalluvial} can now handle negative observations way geom_bar(): grouping observations negative strata stacking strata negative y direction (.e. opposite direction positive strata). new functionality complicates discussion two ways: Positioning strata: negative strata reverse-ordered respect positive strata, geom_bar(), ordered way (vertically, without regard sign). Positioning lodes within strata: Two strata may correspond stratum variable axis (one positive one negative), -determines ordering lodes within strata. first issue binary: decreasing reverse chosen, two options negative strata. choice made setting new absolute parameter either TRUE (default), yields mirror-image ordering, FALSE, adopts vertical ordering. setting also influences ordering lodes within strata nexus reverse, namely level alluvium variable. second issue handled creating deposit variable unique values corresponding signed stratum variable value, order prescribed decreasing, reverse, absolute. deposit variable used place stratum lode-ordering tasks . point reference, bar plot toy data, randomized sign variable used indicate negative-valued observations:  default behavior, illustrated flows, positive strata proceed downward negative strata proceed upward, cases larger absolute values zero:  instead strata proceed downward axis, lodes downward within stratum, set absolute = FALSE (now plotting alluvia):  Note labels consistent alluvia flows, despite omission fill aesthetic text geom, aesthetic variables prioritized ordering lodes.","code":"set.seed(78) toy$sign <- sample(c(-1, 1), nrow(toy), replace = TRUE) print(toy) ##    subject collection category class sign ## 1        A          1        Y   one   -1 ## 2        B          1        X   one    1 ## 3        C          1        X   one    1 ## 4        D          1        Y   two   -1 ## 5        E          1        X   two    1 ## 6        A          2        X   one    1 ## 7        B          2        Y   one    1 ## 8        C          2        Y   one    1 ## 9        D          2        X   two   -1 ## 10       E          2        X   two   -1 ## 11       A          3        X   one    1 ## 12       B          3        Y   one   -1 ## 13       C          3        Y   one   -1 ## 14       D          3        Y   two    1 ## 15       E          3        X   two    1 ## 16       A          4        X   one    1 ## 17       B          4        X   one    1 ## 18       C          4        X   one   -1 ## 19       D          4        X   two   -1 ## 20       E          4        X   two    1 ggplot(toy, aes(x = collection, y = sign)) +   geom_bar(aes(fill = class), stat = \"identity\") ggplot(toy, aes(x = collection, stratum = category, alluvium = subject,                 y = sign)) +   geom_flow(aes(fill = class)) +   geom_stratum() +   geom_text(stat = \"stratum\", aes(label = category)) ggplot(toy, aes(x = collection, stratum = category, alluvium = subject,                 y = sign)) +   geom_alluvium(aes(fill = class), absolute = FALSE) +   geom_stratum(absolute = FALSE) +   geom_text(stat = \"alluvium\", aes(label = subject), absolute = FALSE)"},{"path":"/articles/order-rectangles.html","id":"more-examples","dir":"Articles","previous_headings":"","what":"More examples","title":"The Order of the Rectangles","text":"examples functionality showcased can found documentation stat_*() functions, browsable package website.","code":""},{"path":"/articles/order-rectangles.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"The Order of the Rectangles","text":"","code":"sessioninfo::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.4.2 (2024-10-31) ##  os       macOS Sonoma 14.4.1 ##  system   aarch64, darwin20 ##  ui       X11 ##  language en ##  collate  en_US.UTF-8 ##  ctype    en_US.UTF-8 ##  tz       America/New_York ##  date     2025-06-12 ##  pandoc   2.19 @ /opt/homebrew/bin/ (via rmarkdown) ##  quarto   NA ##  ## ─ Packages ─────────────────────────────────────────────────────────────────── ##  package      * version date (UTC) lib source ##  bslib          0.9.0   2025-01-30 [2] CRAN (R 4.4.1) ##  cachem         1.1.0   2024-05-16 [2] CRAN (R 4.4.1) ##  cli            3.6.5   2025-04-23 [2] CRAN (R 4.4.1) ##  desc           1.4.3   2023-12-10 [2] CRAN (R 4.4.1) ##  digest         0.6.37  2024-08-19 [2] CRAN (R 4.4.1) ##  dplyr          1.1.4   2023-11-17 [2] CRAN (R 4.4.0) ##  evaluate       1.0.3   2025-01-10 [2] CRAN (R 4.4.1) ##  farver         2.1.2   2024-05-13 [2] CRAN (R 4.4.1) ##  fastmap        1.2.0   2024-05-15 [2] CRAN (R 4.4.1) ##  fs             1.6.6   2025-04-12 [2] CRAN (R 4.4.1) ##  generics       0.1.4   2025-05-09 [2] CRAN (R 4.4.1) ##  ggalluvial   * 0.12.5  2025-06-12 [1] local ##  ggplot2      * 3.5.2   2025-04-09 [2] CRAN (R 4.4.1) ##  glue           1.8.0   2024-09-30 [2] CRAN (R 4.4.1) ##  gtable         0.3.6   2024-10-25 [2] CRAN (R 4.4.1) ##  htmltools      0.5.8.1 2024-04-04 [2] CRAN (R 4.4.1) ##  htmlwidgets    1.6.4   2023-12-06 [2] CRAN (R 4.4.0) ##  jquerylib      0.1.4   2021-04-26 [2] CRAN (R 4.4.0) ##  jsonlite       2.0.0   2025-03-27 [2] CRAN (R 4.4.1) ##  knitr          1.50    2025-03-16 [2] CRAN (R 4.4.1) ##  labeling       0.4.3   2023-08-29 [2] CRAN (R 4.4.1) ##  lifecycle      1.0.4   2023-11-07 [2] CRAN (R 4.4.1) ##  magrittr       2.0.3   2022-03-30 [2] CRAN (R 4.4.1) ##  pillar         1.10.2  2025-04-05 [2] CRAN (R 4.4.1) ##  pkgconfig      2.0.3   2019-09-22 [2] CRAN (R 4.4.1) ##  pkgdown        2.1.2   2025-04-28 [2] CRAN (R 4.4.1) ##  purrr          1.0.4   2025-02-05 [2] CRAN (R 4.4.1) ##  R6             2.6.1   2025-02-15 [2] CRAN (R 4.4.1) ##  ragg           1.4.0   2025-04-10 [2] CRAN (R 4.4.1) ##  RColorBrewer   1.1-3   2022-04-03 [2] CRAN (R 4.4.1) ##  rlang          1.1.6   2025-04-11 [2] CRAN (R 4.4.1) ##  rmarkdown      2.29    2024-11-04 [2] CRAN (R 4.4.1) ##  sass           0.4.10  2025-04-11 [2] CRAN (R 4.4.1) ##  scales         1.4.0   2025-04-24 [2] CRAN (R 4.4.1) ##  sessioninfo    1.2.3   2025-02-05 [2] CRAN (R 4.4.1) ##  systemfonts    1.2.3   2025-04-30 [2] CRAN (R 4.4.1) ##  textshaping    1.0.1   2025-05-01 [2] CRAN (R 4.4.1) ##  tibble         3.2.1   2023-03-20 [2] CRAN (R 4.4.0) ##  tidyr          1.3.1   2024-01-24 [2] CRAN (R 4.4.1) ##  tidyselect     1.2.1   2024-03-11 [2] CRAN (R 4.4.0) ##  vctrs          0.6.5   2023-12-01 [2] CRAN (R 4.4.0) ##  withr          3.0.2   2024-10-28 [2] CRAN (R 4.4.1) ##  xfun           0.52    2025-04-02 [2] CRAN (R 4.4.1) ##  yaml           2.3.10  2024-07-26 [2] CRAN (R 4.4.1) ##  ##  [1] /private/var/folders/4p/3cy0qmp15x9216qsqhh84kzm0000gn/T/Rtmpys5FaI/temp_libpath178905dc69195 ##  [2] /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library ##  * ── Packages attached to the search path. ##  ## ──────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/shiny.html","id":"section-problem","dir":"Articles","previous_headings":"","what":"Problem","title":"Tooltips for ggalluvial plots in Shiny apps","text":"interactive visualization, visually cleaner better interpretation labels information appear “tooltips” user hovers clicks elements plot, rather displaying labels plot one time. However, {ggalluvial} package natively include functionality. possible enable using functions several packages. vignette illustrates create Shiny apps display alluvial plot tooltips appear user hovers two different plot elements: strata created geom_stratum() alluvia created geom_alluvium(). example provided wide-format alluvial data (UCBAdmissions dataset) long-format alluvial data (vaccinations dataset). tooltips appear user hovers elements plot show text label count group. user hovers clicks somewhere inside ggplot panel, Shiny automatically returns information location mouse cursor plot coordinates. means main work extract manually recalculate coordinates different plot elements. information, can determine plot element cursor hovering display appropriate information tooltip output method. Note: app demonstrated depends packages {htmltools} {sp}, addition course {ggalluvial} {shiny}. Please aware packages need installed server Shiny app running.","code":""},{"path":"/articles/shiny.html","id":"section-hovering-over-and-clicking-on-strata","dir":"Articles","previous_headings":"Problem","what":"Hovering over and clicking on strata","title":"Tooltips for ggalluvial plots in Shiny apps","text":"Enabling hovering clicking strata straightforward rectangular shape. need minimum maximum x y coordinates rectangles. rectangles evenly spaced along x-axis, centered positive integers beginning 1. width set geom_stratum() , example, know x-coordinates first stratum c(1 - width/2, 1 + width/2). y-coordinates can determined number rows input data multiplied weights.","code":""},{"path":"/articles/shiny.html","id":"section-hovering-over-and-clicking-on-alluvia","dir":"Articles","previous_headings":"Problem","what":"Hovering over and clicking on alluvia","title":"Tooltips for ggalluvial plots in Shiny apps","text":"Hovering clicking alluvia difficult shapes alluvia complex. default shape polygons includes xspline curve drawn using {grid} package. need manually reconstruct coordinates polygons, use sp::pointInPolygon() detect , , polygons cursor .","code":""},{"path":"/articles/shiny.html","id":"section-app-with-wide-format-alluvial-data","dir":"Articles","previous_headings":"","what":"App with wide-format alluvial data","title":"Tooltips for ggalluvial plots in Shiny apps","text":"app embedded , followed walkthrough source code. aren’t connected internet, loaded vignette using vignette('shiny', package = 'ggalluvial') rather browseVignettes(package = 'ggalluvial'), app display window . can view app locally running line code console:","code":"shiny::shinyAppDir(system.file(\"examples/ex-shiny-wide-data\", package=\"ggalluvial\"))"},{"path":"/articles/shiny.html","id":"section-structure-of-the-example-app","dir":"Articles","previous_headings":"","what":"Structure of the example app","title":"Tooltips for ggalluvial plots in Shiny apps","text":", go section code detail. full source code included package’s examples directory. app first (1) loads data (2) builds plot. , (3) information extracted built plot object (4) manually recalculate coordinates polygons make plot. Internally, {ggalluvial} uses {grid} package draw polygons, next steps (5) define minima maxima x y axes {grid} units units appear plot’s coordinate system, (6) convert polygon coordinates {grid} units plot units. Next, user interface defined, including output (7) plot image (8) tooltip. final block code server function, first (9) renders plot. Finally, tooltip defined. includes (10) logic determine whether mouse cursor inside plot panel, (11) whether hovering stratum, (12) alluvium, neither, based mouse coordinates provided Shiny. mouse hovering plot element, app finds appropriate information prints small “tooltip” box next mouse cursor (11b 12b). structure app pseudocode.","code":"'<(1) Load data.>'  '<(2) Create \"ggplot\" object for alluvial plot and build it.>'  '<(3) Extract data from built plot object used to create alluvium polygons.>'  for (polygon in polygons) {      '<(4) Use polygon splines to generate coordinates of alluvium boundaries.>' }  '<(5) Define range of coordinates in grid units and plot units.>'  for (polygon in polygons) {          '<(6) Convert coordinates from grid units to plot units.>' }  ui <- fluidPage(      '<(7) Output plot with hovering enabled.>'            '<(8) Output tooltip.>' )   server <- function(input, output, session) {      output$alluvial_plot <- renderPlot({     '<(9) Render the plot.>'   })      output$tooltip <- renderText({     if ('<(10) mouse cursor is within the plot panel>') {       if ('<(11) mouse cursor is within a stratum box>') {         '<(11b) Render stratum tooltip.>'       } else {         if ('<(12) mouse cursor is within an alluvium polygon>') {           '<(12b) Render alluvium tooltip.>'         }       }     }   })    }"},{"path":"/articles/shiny.html","id":"section-loading-data","dir":"Articles","previous_headings":"Structure of the example app","what":"Loading data","title":"Tooltips for ggalluvial plots in Shiny apps","text":"UC-Berkeley admissions dataset, UCBAdmissions, used example. loading necessary packages, first thing app load data coerce array data frame. Next set offset, distance cursor tooltip, pixels, x y directions. also set node_width alluvium_width , used arguments geom_stratum() geom_alluvium() , later determine whether mouse cursor hovering stratum/alluvium.","code":"data(UCBAdmissions) ucb_admissions <- as.data.frame(UCBAdmissions) # Offset, in pixels, for location of tooltip relative to mouse cursor, # in both x and y direction. offset <- 5 # Width of node boxes node_width <- 1/4 # Width of alluvia alluvium_width <- 1/3"},{"path":"/articles/shiny.html","id":"section-drawing-the-plot-and-extracting-coordinates","dir":"Articles","previous_headings":"Structure of the example app","what":"Drawing the plot and extracting coordinates","title":"Tooltips for ggalluvial plots in Shiny apps","text":"Next, create ggplot object alluvial plot, call ggplot_build() function build plot without displaying . Now hard part: reverse-engineering coordinates alluvia polygons. makes use pbuilt$data[[1]], data frame individual elements alluvial plot. add additional column width using value set , split data frame group (groups correspond individual alluvium polygons). apply function data_to_alluvium() element list get coordinates “skeleton” x-spline curve. , pass coordinates function grid::xsplineGrob() fill smooth spline curves convert {grid} object. pass resulting object grid::xsplinePoints(), converts back numeric vectors. point now coordinates alluvium polygons. object xspline_points list length equal number alluvium polygons plot. element list list elements x y, numeric vectors. coordinates {grid} plotting units need convert units axes plot. determining range x y-axes {grid} units (xrange_old yrange_old). fix range x axis 1 number strata, adjusted half alluvium width side. Next fix range y-axis sum counts across alluvia one node. define function new_range_transform() inline apply set coordinates. returns another list, polygon_coords, structure xspline_points. Now coordinates polygons plot units!","code":"# Draw plot. p <- ggplot(ucb_admissions,             aes(y = Freq, axis1 = Gender, axis2 = Dept)) +    geom_alluvium(aes(fill = Admit), knot.pos = 1/4, width = alluvium_width) +    geom_stratum(width = node_width, reverse = TRUE, fill = 'black', color = 'grey') +    geom_label(aes(label = after_stat(stratum)),               stat = \"stratum\",               reverse = TRUE,               size = rel(2)) +    theme_bw() +   scale_fill_brewer(type = \"qual\", palette = \"Set1\") +   scale_x_discrete(limits = c(\"Gender\", \"Dept\"), expand = c(.05, .05)) +   scale_y_continuous(expand = c(0, 0)) +   ggtitle(\"UC Berkeley admissions and rejections\", \"by sex and department\") +   theme(plot.title = element_text(size = rel(1)),         plot.subtitle = element_text(size = rel(1)),         legend.position = 'bottom')  # Build the plot.  pbuilt <- ggplot_build(p) # Add width parameter, and then convert built plot data to xsplines data_draw <- transform(pbuilt$data[[1]], width = alluvium_width) groups_to_draw <- split(data_draw, data_draw$group) group_xsplines <- lapply(groups_to_draw,                          data_to_alluvium)   # Convert xspline coordinates to grid object. xspline_coords <- lapply(   group_xsplines,   function(coords) grid::xsplineGrob(x = coords$x,                                       y = coords$y,                                       shape = coords$shape,                                       open = FALSE) )  # Use grid::xsplinePoints to draw the curve for each polygon xspline_points <- lapply(xspline_coords, grid::xsplinePoints) # Define the x and y axis limits in grid coordinates (old) and plot # coordinates (new) xrange_old <- range(unlist(lapply(   xspline_points,   function(pts) as.numeric(pts$x) ))) yrange_old <- range(unlist(lapply(   xspline_points,   function(pts) as.numeric(pts$y) ))) xrange_new <- c(1 - alluvium_width/2, max(pbuilt$data[[1]]$x) + alluvium_width/2)  yrange_new <- c(0, sum(pbuilt$data[[2]]$count[pbuilt$data[[2]]$x == 1])) # Define function to convert grid graphics coordinates to data coordinates new_range_transform <- function(x_old, range_old, range_new) {   (x_old - range_old[1])/(range_old[2] - range_old[1]) *     (range_new[2] - range_new[1]) + range_new[1] }  # Using the x and y limits, convert the grid coordinates into plot coordinates. polygon_coords <- lapply(xspline_points, function(pts) {   x_trans <- new_range_transform(x_old = as.numeric(pts$x),                                   range_old = xrange_old,                                   range_new = xrange_new)   y_trans <- new_range_transform(x_old = as.numeric(pts$y),                                   range_old = yrange_old,                                   range_new = yrange_new)   list(x = x_trans, y = y_trans) })"},{"path":"/articles/shiny.html","id":"section-user-interface","dir":"Articles","previous_headings":"Structure of the example app","what":"User interface","title":"Tooltips for ggalluvial plots in Shiny apps","text":"app includes minimal user interface two output elements. elements : plotOutput argument hover defined, enable behavior determined cursor’s plot coordinates whenever user hovers plot. htmlOutput tooltip appears next cursor hover. elements wrapped fluidRow() div() tag. Note: vignette illustrates display output user hovers element. want display output user clicks element, corresponding argument plotOutput() click = clickOpts(id = \"plot_click\"). return location mouse cursor plot coordinates user clicks somewhere within plot panel. Also Note: example presented , plot drawing coordinate extracting code outside server() function, plot change user input. However building app plot changes response user input, example menu options variables display, plot drawing code inside renderPlot() expression. means coordinates may need recalculated time user input changes well. case, may need use global assignment operator <<- coordinates accessible outside renderPlot() expression.","code":"ui <- fluidPage(   fluidRow(tags$div(     style = \"position: relative;\",     plotOutput(\"alluvial_plot\", height = \"650px\",                 hover = hoverOpts(id = \"plot_hover\")                ),     htmlOutput(\"tooltip\"))) )"},{"path":"/articles/shiny.html","id":"section-server-function","dir":"Articles","previous_headings":"Structure of the example app","what":"Server function","title":"Tooltips for ggalluvial plots in Shiny apps","text":"server function, first call renderPlot() draw plot app window. Next, define tooltip renderText() expression. Within expression, first extract cursor’s plot coordinates user input. determine whether cursor hovering stratum , display appropriate tooltip. screenshot tooltip stratum mouse cursor hovering stratum, determine whether hovering alluvium polygon , display different information tooltip. screenshot tooltip alluvium mouse cursor hovering empty region plot, renderText() returns nothing tooltip appears. screenshot cursor empty region Let’s take deeper dive logic used determine text appears tooltip. First, check whether cursor inside plot panel. , element plot_hover input NULL. case renderText() return nothing tooltip appear.","code":"output$alluvial_plot <- renderPlot(p, res = 200) output$tooltip <- renderText(   if(!is.null(input$plot_hover)) { ... }   ... )"},{"path":"/articles/shiny.html","id":"section-hovering-over-a-stratum","dir":"Articles","previous_headings":"Structure of the example app > Server function","what":"Hovering over a stratum","title":"Tooltips for ggalluvial plots in Shiny apps","text":"Next, check whether cursor stratum. round x-coordinate mouse cursor data units nearest integer, determine whether x-coordinate within node_width/2 integer. , mouse cursor horizontally within box. -else statement includes behavior display tooltip stratum true, alluvium false. condition true, need find index row input data goes stratum cursor . data frame pbuilt$data[[2]] includes columns x, ymin, ymax define x-coordinate center stratum, minimum maximum y-coordinates stratum. find row index data frame x equal rounded x-coordinate cursor, y-coordinate cursor falls ymin ymax. find information display tooltip, get name stratum well width data pbuilt. Finally, render tooltip using div tag. provide text display arguments htmltools::renderTags(). also paste CSS style information together pass style argument. Note tooltip positioning provided CSS coordinates (pixels), data coordinates. require additional effort part plot_hover also includes element called coords_css, contains mouse cursor location pixel units.","code":"hover <- input$plot_hover x_coord <- round(hover$x)      if(abs(hover$x - x_coord) < (node_width / 2)) { ... } else { ... } node_row <-    pbuilt$data[[2]]$x == x_coord & hover$y > pbuilt$data[[2]]$ymin & hover$y < pbuilt$data[[2]]$ymax node_label <- pbuilt$data[[2]]$stratum[node_row] node_n <- pbuilt$data[[2]]$count[node_row] renderTags(   tags$div(     node_label, tags$br(),     \"n =\", node_n,     style = paste0(       \"position: absolute; \",       \"top: \", hover$coords_css$y + offset, \"px; \",       \"left: \", hover$coords_css$x + offset, \"px; \",       \"background: gray; \",       \"padding: 3px; \",       \"color: white; \"     )   ) )$html"},{"path":"/articles/shiny.html","id":"section-hovering-over-an-alluvium","dir":"Articles","previous_headings":"Structure of the example app > Server function","what":"Hovering over an alluvium","title":"Tooltips for ggalluvial plots in Shiny apps","text":"cursor stratum, next nested -statement checks whether alluvium. done using function sp::point..polygon() applied across polygons defined coordinates inside renderPlot() expression. least one polygon beneath mouse cursor, locate corresponding row input data extract information display tooltip. (condition met, means cursor hovering empty area plot, tooltip appears.) situation one polygon overlapping, get information polygon plotted last calling rev() logical vector returned point..polygon(). means tooltip display information alluvium appears “top” plot. example, display names nodes alluvium connects, arrows , width alluvium. render tooltip using identical syntax one .","code":"hover_within_flow <- sapply(   polygon_coords,   function(pol) point.in.polygon(point.x = hover$x,                                   point.y = hover$y,                                   pol.x = pol$x,                                   pol.y = pol$y) ) if (any(hover_within_flow)) { ... } coord_id <- rev(which(hover_within_flow == 1))[1] flow_label <- paste(groups_to_draw[[coord_id]]$stratum, collapse = ' -> ') flow_n <- groups_to_draw[[coord_id]]$count[1] renderTags(   tags$div(     flow_label, tags$br(),     \"n =\", flow_n,     style = paste0(       \"position: absolute; \",       \"top: \", hover$coords_css$y + offset, \"px; \",       \"left: \", hover$coords_css$x + offset, \"px; \",       \"background: gray; \",       \"padding: 3px; \",       \"color: white; \"     )   ) )$html"},{"path":"/articles/shiny.html","id":"section-app-with-long-format-alluvial-data","dir":"Articles","previous_headings":"","what":"App with long-format alluvial data","title":"Tooltips for ggalluvial plots in Shiny apps","text":"vaccinations dataset used long-format alluvial data. app embedded bottom document, don’t need walk source code ’s almost identical code . output ggplot_build() used find polygon coordinates information tooltips consistent structure regardless initial format input data. Therefore, calculation polygon coordinates, user interface, server functions two apps identical. difference initial creation ggplot() object. Refer back primary vignette several example plots made long wide data. app embedded . , app doesn’t display window whatever reason, can view locally running line code console:","code":"shiny::shinyAppDir(system.file(\"examples/ex-shiny-long-data\", package=\"ggalluvial\"))"},{"path":"/articles/shiny.html","id":"section-conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Tooltips for ggalluvial plots in Shiny apps","text":"vignette demonstrates enable tooltips {ggalluvial} plots Shiny apps. one many possible ways . may optimal way — solutions certainly possible! full source code Shiny apps included {ggalluvial} package ‘examples’ subdirectory package installed: source files ggalluvial/examples/ex-shiny-wide-data/app.R ggalluvial/examples/ex-shiny-long-data/app.R.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jason Cory Brunson. Author, maintainer. Quentin D. Read. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jason Cory Brunson Quentin D. Read (). ggalluvial: Alluvial Plots 'ggplot2'. R package version 0.12.5. http://corybrunson.github.io/ggalluvial/ Brunson JC (2020). “ggalluvial: Layered Grammar Alluvial Plots.” Journal Open Source Software, 5(49), 2017. doi:10.21105/joss.02017.","code":"@Misc{ggalluvial-package,   title = {ggalluvial: Alluvial Plots in 'ggplot2'},   author = {Jason Cory Brunson and Quentin D. Read},   note = {R package version 0.12.5},   url = {http://corybrunson.github.io/ggalluvial/}, } @Article{ggalluvial-article,   title = {{ggalluvial}: Layered Grammar for Alluvial Plots},   author = {Jason Cory Brunson},   year = {2020},   journal = {Journal of Open Source Software},   volume = {5},   number = {49},   pages = {2017},   doi = {10.21105/joss.02017}, }"},{"path":"/index.html","id":"ggalluvial","dir":"","previous_headings":"","what":"Alluvial Plots in ggplot2","title":"Alluvial Plots in ggplot2","text":"ggplot2 extension alluvial plots.","code":""},{"path":"/index.html","id":"design","dir":"","previous_headings":"","what":"Design","title":"Alluvial Plots in ggplot2","text":"alluvial plots implemented can used visualize frequency distributions time frequency tables involving several categorical variables. design inspired alluvial package, ggplot2 framework induced several conspicuous differences: alluvial understands variety inputs (vectors, lists, data frames), whereas ggalluvial requires single data frame; alluvial uses variable inputs dimension data, whereas ggalluvial requires user specify dimensions, either separate aesthetics key-value pairs; alluvial produces alluvia, link cohorts across multiple dimensions, (called) strata, partition data along dimension, single function; whereas ggalluvial relies separate layers (stats geoms) produce strata, alluvia, alluvial segments called lodes flows. Additionally, ggalluvial arranges layers vertically without gaps, secondary plotting axis indicates cumulative values strata dimension.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Alluvial Plots in ggplot2","text":"latest stable release can installed CRAN: cran branch contain version recently submitted CRAN. duplicated master branch, source website built. development version can installed (default) main branch GitHub: Note , order build vignettes, imported packages alluvial, ggfittext, ggrepel must installed. skip step, leave build_vignettes unspecified set FALSE. optimization branch contains development version experimental functions reduce number area alluvial overlaps (see issue #6). Install follows: Note, however, branch kept pace main branch recent upgrades CRAN.","code":"install.packages(\"ggalluvial\") remotes::install_github(\"corybrunson/ggalluvial@main\", build_vignettes = TRUE) remotes::install_github(\"corybrunson/ggalluvial\", ref = \"optimization\")"},{"path":[]},{"path":"/index.html","id":"example","dir":"","previous_headings":"Usage","what":"Example","title":"Alluvial Plots in ggplot2","text":"generate alluvial plot representation multi-dimensional categorical dataset passengers Titanic:  data “wide” format, ggalluvial also recognizes data “long” format can convert two:","code":"titanic_wide <- data.frame(Titanic) head(titanic_wide) #>   Class    Sex   Age Survived Freq #> 1   1st   Male Child       No    0 #> 2   2nd   Male Child       No    0 #> 3   3rd   Male Child       No   35 #> 4  Crew   Male Child       No    0 #> 5   1st Female Child       No    0 #> 6   2nd Female Child       No    0 ggplot(data = titanic_wide,        aes(axis1 = Class, axis2 = Sex, axis3 = Age,            y = Freq)) +   scale_x_discrete(limits = c(\"Class\", \"Sex\", \"Age\"), expand = c(.2, .05)) +   xlab(\"Demographic\") +   geom_alluvium(aes(fill = Survived)) +   geom_stratum() +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +   theme_minimal() +   ggtitle(\"passengers on the maiden voyage of the Titanic\",           \"stratified by demographics and survival\") titanic_long <- to_lodes_form(data.frame(Titanic),                               key = \"Demographic\",                               axes = 1:3) head(titanic_long) #>   Survived Freq alluvium Demographic stratum #> 1       No    0        1       Class     1st #> 2       No    0        2       Class     2nd #> 3       No   35        3       Class     3rd #> 4       No    0        4       Class    Crew #> 5       No    0        5       Class     1st #> 6       No    0        6       Class     2nd ggplot(data = titanic_long,        aes(x = Demographic, stratum = stratum, alluvium = alluvium,            y = Freq, label = stratum)) +   geom_alluvium(aes(fill = Survived)) +   geom_stratum() + geom_text(stat = \"stratum\") +   theme_minimal() +   ggtitle(\"passengers on the maiden voyage of the Titanic\",           \"stratified by demographics and survival\")"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"Usage","what":"Documentation","title":"Alluvial Plots in ggplot2","text":"detailed discussion data formats recognized ggalluvial several examples illustrate flexibility limitations, read technical vignette: Several additional vignettes offer detailed solutions specific needs: “Labeling small strata” (\"labels\") elegantly label strata wide range heights alluvial plot; “Order Rectangles” (\"order-rectangles\") control positioning strata lodes alluvial plot; “Tooltips ggalluvial plots Shiny apps” (\"shiny\") incorporate alluvial plots interactive apps. object documentation includes several examples. Use help() call forth detail layer (stat_* geom_*), conversion functions (to_*_form), data sets installed package (vaccinations majors).","code":"vignette(topic = \"ggalluvial\", package = \"ggalluvial\")"},{"path":"/index.html","id":"short-form","dir":"","previous_headings":"Usage","what":"Short form","title":"Alluvial Plots in ggplot2","text":"digestible guidance using ggalluvial, check three cheat sheets demos students Joyce Robbins’s Exploratory Data Analysis Visualization Community Contribution Project: introduction Meggie Wen (Chapter 33) cheat sheet Qingyi Zhang (Chapter 14) blog package implements alluvial plots Arnav Saxena (Chapter 134)","code":""},{"path":[]},{"path":"/index.html","id":"resources","dir":"","previous_headings":"Acknowledgments","what":"Resources","title":"Alluvial Plots in ggplot2","text":"Development package benefitted use equipment support colleagues UConn Health UF Health.","code":""},{"path":"/index.html","id":"contribute","dir":"","previous_headings":"Acknowledgments","what":"Contribute","title":"Alluvial Plots in ggplot2","text":"Contributions form welcome! Pretty much every fix feature package derives problem question posed someone datasets design goals hadn’t anticipated. See CONTRIBUTING file guidance, please respect Code Conduct.","code":""},{"path":"/index.html","id":"cite","dir":"","previous_headings":"Acknowledgments","what":"Cite","title":"Alluvial Plots in ggplot2","text":"use ggalluvial-generated figures publication, ’d grateful hear ! can also cite package according citation(\"ggalluvial\").","code":""},{"path":"/reference/alluvial-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for alluvial structure and convert between alluvial formats — alluvial-data","title":"Check for alluvial structure and convert between alluvial formats — alluvial-data","text":"Alluvial plots consist multiple horizontally-distributed columns (axes) representing factor variables, vertical divisions (strata) axes representing variables' values; splines (alluvial flows) connecting vertical subdivisions (lodes) within strata adjacent axes representing subsets amounts observations take corresponding values corresponding variables. function checks data frame either two types alluvial structure:","code":""},{"path":"/reference/alluvial-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for alluvial structure and convert between alluvial formats — alluvial-data","text":"","code":"is_lodes_form(   data,   key,   value,   id,   weight = NULL,   site = NULL,   logical = TRUE,   silent = FALSE )  is_alluvia_form(   data,   ...,   axes = NULL,   weight = NULL,   logical = TRUE,   silent = FALSE )  to_lodes_form(   data,   ...,   axes = NULL,   key = \"x\",   value = \"stratum\",   id = \"alluvium\",   diffuse = FALSE,   discern = FALSE )  to_alluvia_form(data, key, value, id, distill = FALSE)"},{"path":"/reference/alluvial-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for alluvial structure and convert between alluvial formats — alluvial-data","text":"data data frame. key, value, id to_lodes_form, handled tidyr::gather() used name new axis (key), stratum (value), alluvium (identifying) variables. to_alluvia_form, handled tidyr::spread() used identify fields data used axis (key), stratum (value), alluvium (identifying) variables. weight Optional field data, handled using rlang::enquo(), used heights depths alluvia lodes. site Optional vector fields data, handled using rlang::enquos(), used group rows testing duplicate missing id-axis pairings. Variables intended faceting passed site. logical Defunct. Whether return logical value character string indicating type alluvial structure (\"none\", \"lodes\", \"alluvia\"). silent Whether print messages. ... Used is_alluvia_form to_lodes_form dplyr::select() determine axis variables, alternative axes. Ignored axes provided. axes *_alluvia_form, handled dplyr::select() used identify field(s) data used axes. diffuse Fields data, handled using tidyselect::vars_select(), merge reshapen data id. must subset axis variables. Alternatively, logical value indicating whether merge (TRUE) none (FALSE) axis variables. discern Logical value indicating whether suffix values variables used axes appear one variable order distinguish factor levels. forces levels combined factor variable value order axes. distill logical value indicating whether include variables, passed key value, vary within values id. Alternatively, function (name) used distill variable single value. addition existing functions, distill accepts character values \"first\" (used distill TRUE), \"last\", \"\" (returns first modal value).","code":""},{"path":"/reference/alluvial-data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for alluvial structure and convert between alluvial formats — alluvial-data","text":"One row per lode, wherein row encodes subset amount observations specific profile axis values, key field encodes axis, value field encodes value within axis, id column identifies multiple lodes corresponding subset amount observations. is_lodes_form tests structure. One row per alluvium, wherein row encodes subset amount observations specific profile axis values set axes fields encodes values axis variable. is_alluvia_form tests structure. to_lodes_form takes data frame several designated variables used axes alluvial plot, reshapes data frame axis variable names constitute new factor variable values comprise another. variables' values repeated, row-grouping variable can introduced. function invokes tidyr::gather(). to_alluvia_form takes data frame axis axis value variables used alluvial plot, reshape data frame axes constitute separate variables whose values given value variable. function invokes tidyr::spread().","code":""},{"path":[]},{"path":"/reference/alluvial-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for alluvial structure and convert between alluvial formats — alluvial-data","text":"","code":"# Titanic data in alluvia format titanic_alluvia <- as.data.frame(Titanic) head(titanic_alluvia) #>   Class    Sex   Age Survived Freq #> 1   1st   Male Child       No    0 #> 2   2nd   Male Child       No    0 #> 3   3rd   Male Child       No   35 #> 4  Crew   Male Child       No    0 #> 5   1st Female Child       No    0 #> 6   2nd Female Child       No    0 is_alluvia_form(titanic_alluvia,                 weight = \"Freq\") #> [1] TRUE # Titanic data in lodes format titanic_lodes <- to_lodes_form(titanic_alluvia,                                key = \"x\", value = \"stratum\", id = \"alluvium\",                                axes = 1:4) head(titanic_lodes) #>   Freq alluvium     x stratum #> 1    0        1 Class     1st #> 2    0        2 Class     2nd #> 3   35        3 Class     3rd #> 4    0        4 Class    Crew #> 5    0        5 Class     1st #> 6    0        6 Class     2nd is_lodes_form(titanic_lodes,               key = \"x\", value = \"stratum\", id = \"alluvium\",               weight = \"Freq\") #> [1] TRUE # again in lodes format, this time diffusing the `Class` variable titanic_lodes2 <- to_lodes_form(titanic_alluvia,                                 key = variable, value = value,                                 id = cohort,                                 1:3, diffuse = Class) head(titanic_lodes2) #>   cohort Class Survived Freq variable value #> 1      1   1st       No    0    Class   1st #> 2      1   1st       No    0      Sex  Male #> 3      1   1st       No    0      Age Child #> 4      2   2nd       No    0    Class   2nd #> 5      2   2nd       No    0      Sex  Male #> 6      2   2nd       No    0      Age Child is_lodes_form(titanic_lodes2,               key = variable, value = value, id = cohort,               weight = Freq) #> [1] TRUE # use `site` to separate data before lode testing is_lodes_form(titanic_lodes2,               key = variable, value = value, id = Class,               weight = Freq) #> Duplicated id-axis pairings. #> [1] FALSE is_lodes_form(titanic_lodes2,               key = variable, value = value, id = Class,               weight = Freq, site = cohort) #> [1] TRUE  # curriculum data in lodes format data(majors) head(majors) #>   student semester curriculum #> 1       1    CURR1   Painting #> 2       2    CURR1   Painting #> 3       6    CURR1   Sculpure #> 4       8    CURR1   Painting #> 5       9    CURR1   Sculpure #> 6      10    CURR1   Painting is_lodes_form(majors,               key = \"semester\", value = \"curriculum\", id = \"student\") #> [1] TRUE # curriculum data in alluvia format majors_alluvia <- to_alluvia_form(majors,                                   key = \"semester\", value = \"curriculum\",                                   id = \"student\") head(majors_alluvia) #>   student    CURR1       CURR3       CURR5    CURR7    CURR9   CURR11   CURR13 #> 1       1 Painting    Painting    Painting Painting Painting Painting Painting #> 2       2 Painting    Painting    Painting Painting Painting Painting     <NA> #> 3       6 Sculpure    Sculpure    Painting Painting Painting Painting Painting #> 4       8 Painting    Painting    Painting Painting     <NA> Painting Painting #> 5       9 Sculpure Art History Art History Painting Painting Painting Painting #> 6      10 Painting    Painting    Painting Painting Painting Painting     <NA> #>     CURR15 #> 1 Painting #> 2     <NA> #> 3 Painting #> 4 Painting #> 5 Painting #> 6     <NA> is_alluvia_form(majors_alluvia, tidyselect::starts_with(\"CURR\")) #> Missing alluvia for some stratum combinations. #> [1] TRUE  # distill variables that vary within `id` values set.seed(1) majors$hypo_grade <- LETTERS[sample(5, size = nrow(majors), replace = TRUE)] majors_alluvia2 <- to_alluvia_form(majors,                                    key = \"semester\", value = \"curriculum\",                                    id = \"student\",                                    distill = \"most\") #> Distilled variables: hypo_grade head(majors_alluvia2) #>   student hypo_grade    CURR1       CURR3       CURR5    CURR7    CURR9 #> 1       1          A Painting    Painting    Painting Painting Painting #> 2       2          D Painting    Painting    Painting Painting Painting #> 3       6          B Sculpure    Sculpure    Painting Painting Painting #> 4       8          B Painting    Painting    Painting Painting     <NA> #> 5       9          E Sculpure Art History Art History Painting Painting #> 6      10          A Painting    Painting    Painting Painting Painting #>     CURR11   CURR13   CURR15 #> 1 Painting Painting Painting #> 2 Painting     <NA>     <NA> #> 3 Painting Painting Painting #> 4 Painting Painting Painting #> 5 Painting Painting Painting #> 6 Painting     <NA>     <NA>  # options to distinguish strata at different axes gg <- ggplot(majors_alluvia,              aes(axis1 = CURR1, axis2 = CURR7, axis3 = CURR13)) gg +   geom_alluvium(aes(fill = as.factor(student)), width = 2/5, discern = TRUE) +   geom_stratum(width = 2/5, discern = TRUE) +   geom_text(stat = \"stratum\", discern = TRUE, aes(label = after_stat(stratum)))  gg +   geom_alluvium(aes(fill = as.factor(student)), width = 2/5, discern = FALSE) +   geom_stratum(width = 2/5, discern = FALSE) +   geom_text(stat = \"stratum\", discern = FALSE, aes(label = after_stat(stratum)))  # warning when inappropriate ggplot(majors[majors$semester %in% paste0(\"CURR\", c(1, 7, 13)), ],        aes(x = semester, stratum = curriculum, alluvium = student,            label = curriculum)) +   geom_alluvium(aes(fill = as.factor(student)), width = 2/5, discern = TRUE) +   geom_stratum(width = 2/5, discern = TRUE) +   geom_text(stat = \"stratum\", discern = TRUE) #> Warning: Data is already in lodes format, so `discern` will be ignored. #> Warning: Data is already in lodes format, so `discern` will be ignored. #> Warning: Data is already in lodes format, so `discern` will be ignored. #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"/reference/geom_alluvium.html","id":null,"dir":"Reference","previous_headings":"","what":"Alluvia across strata — geom_alluvium","title":"Alluvia across strata — geom_alluvium","text":"geom_alluvium receives dataset horizontal (x) vertical (y, ymin, ymax) positions lodes alluvial plot, intersections alluvia strata. plots lodes , using geom_lode(), flows , using geom_flow().","code":""},{"path":"/reference/geom_alluvium.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alluvia across strata — geom_alluvium","text":"","code":"geom_alluvium(   mapping = NULL,   data = NULL,   stat = \"alluvium\",   position = \"identity\",   width = 1/3,   knot.pos = 1/4,   knot.prop = TRUE,   curve_type = NULL,   curve_range = NULL,   segments = NULL,   outline.type = \"both\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )  data_to_alluvium(   data,   knot.prop = TRUE,   curve_type = \"spline\",   curve_range = NULL,   segments = NULL )"},{"path":"/reference/geom_alluvium.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alluvia across strata — geom_alluvium","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data; override default. position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. width Numeric; width stratum, proportion distance axes. Defaults 1/3. knot.pos horizontal distance x-spline knots stratum (width/2 axis), either (knot.prop = TRUE, default) proportion length x-spline, .e. gap adjacent strata, (knot.prop = FALSE) scale x direction. knot.prop Logical; whether interpret knot.pos proportion length flow (default), rather x scale. curve_type Character; type curve used produce flows. Defaults \"xspline\" can alternatively set one \"linear\", \"cubic\", \"quintic\", \"sine\", \"arctangent\", \"sigmoid\". \"xspline\" produces approximation splines using 4 points per curve; alternatives produce interpolation splines points along graphs functions associated type. See Curves section. curve_range alternative curve_types based asymptotic functions, value along asymptote truncate function obtain shape scaled fit strata. See Curves section. segments number segments used drawing alternative curve (curved boundary flow). less 3, silently changed 3. outline.type Type outline alluvium; one \"\", \"lower\", \"upper\", \"full\". na.rm Logical: FALSE, default, NA lodes included; TRUE, NA lodes constitute separate category, plotted grey (regardless color scheme). show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... Additional arguments passed ggplot2::layer().","code":""},{"path":"/reference/geom_alluvium.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Alluvia across strata — geom_alluvium","text":"helper function data_to_alluvium() takes internal ggplot2 data (mapped aesthetics) curve parameters single alluvium input returns data frame x, y, shape used grid::xsplineGrob() render alluvium.","code":""},{"path":"/reference/geom_alluvium.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Alluvia across strata — geom_alluvium","text":"geom_alluvium, geom_flow, geom_lode, geom_stratum understand following aesthetics (required aesthetics bold): x y ymin ymax alpha colour fill linetype size group group used internally; arguments ignored. Alluvium, flow, lode geoms default alpha = 0.5. Learn setting aesthetics vignette(\"ggplot2-specs\", package = \"ggplot2\").","code":""},{"path":"/reference/geom_alluvium.html","id":"curves","dir":"Reference","previous_headings":"","what":"Curves","title":"Alluvia across strata — geom_alluvium","text":"default, geom_alluvium() geom_flow() render flows lodes filled regions parallel x-splines. graphical elements, generated using grid::xsplineGrob(), parameterized relative location knot (knot.pos). quick render clear read, users may prefer plots use differently-shaped ribbons. variety options documented , e.g., easing functions cheat sheet blog post Jeffrey Shaffer. Easing functions (yet) used ggalluvial, several alternative curves available. encoded continuous, increasing, bijective function unit interval \\([0,1]\\) , rescaled endpoints meet corresponding lodes. rendered piecewise-linearly, default using segments = 48. Summon curve type passing one following strings curve_type: \"linear\":     \\(f(x)=x\\), unique degree-1 polynomial takes 0 0 1 1 \"cubic\":      \\(f(x)=3x^{2}-2x^{3}\\), unique degree-3 polynomial also flat endpoints \"quintic\":    \\(f(x)=10x^{3}-15x^{4}+6x^{5}\\), unique degree-5 polynomial also zero curvature endpoints \"sine\":       unique sinusoidal function flat endpoints \"arctangent\": inverse tangent function, scaled re-centered unit interval interval centered zero radius curve_range \"sigmoid\":    sigmoid function, scaled re-centered unit interval interval centered zero radius curve_range (default) \"xspline\" option uses knot.* parameters, alternative curves use segments parameter, \"arctangent\" \"sigmoid\" use curve_range parameter. (ignored needed.) Larger values curve_range result greater compression steeper slopes. NULL default changed 2+sqrt(3) \"arctangent\" 6 \"sigmoid\". package-specific options set global values curve_type, curve_range, segments defaulted manually set: ggalluvial.curve_type: defaults \"xspline\". ggalluvial.curve_range: defaults NA, triggers curve-specific default values. ggalluvial.segments: defaults 48L. See base::options() use options.","code":""},{"path":"/reference/geom_alluvium.html","id":"defunct-parameters","dir":"Reference","previous_headings":"","what":"Defunct parameters","title":"Alluvia across strata — geom_alluvium","text":"previously defunct parameters axis_width ribbon_bend discontinued. Use width knot.pos instead.","code":""},{"path":[]},{"path":"/reference/geom_alluvium.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alluvia across strata — geom_alluvium","text":"","code":"# basic ggplot(as.data.frame(Titanic),        aes(y = Freq,            axis1 = Class, axis2 = Sex, axis3 = Age,            fill = Survived)) +   geom_alluvium() +   scale_x_discrete(limits = c(\"Class\", \"Sex\", \"Age\"))   gg <- ggplot(alluvial::Refugees,              aes(y = refugees, x = year, alluvium = country)) # time series bump chart (sigmoid flows) gg + geom_alluvium(aes(fill = country, colour = country),                    width = 1/4, alpha = 2/3, decreasing = FALSE,                    curve_type = \"sigmoid\")  # time series line plot of refugees data, sorted by country gg + geom_alluvium(aes(fill = country, colour = country),                    decreasing = NA, width = 0, knot.pos = 0)   # \\donttest{ # irregular spacing between axes of a continuous variable refugees_sub <- subset(alluvial::Refugees, year %in% c(2003, 2005, 2010, 2013)) gg <- ggplot(data = refugees_sub,              aes(x = year, y = refugees, alluvium = country)) +   theme_bw() +   scale_fill_brewer(type = \"qual\", palette = \"Set3\") # proportional knot positioning (default) gg +   geom_alluvium(aes(fill = country),                 alpha = .75, decreasing = FALSE, width = 1/2) +   geom_stratum(aes(stratum = country), decreasing = FALSE, width = 1/2)  # constant knot positioning gg +   geom_alluvium(aes(fill = country),                 alpha = .75, decreasing = FALSE, width = 1/2,                 knot.pos = 1, knot.prop = FALSE) +   geom_stratum(aes(stratum = country), decreasing = FALSE, width = 1/2)  # coarsely-segmented curves gg +   geom_alluvium(aes(fill = country),                 alpha = .75, decreasing = FALSE, width = 1/2,                 curve_type = \"arctan\", segments = 6) +   geom_stratum(aes(stratum = country), decreasing = FALSE, width = 1/2)  # custom-ranged curves gg +   geom_alluvium(aes(fill = country),                 alpha = .75, decreasing = FALSE, width = 1/2,                 curve_type = \"arctan\", curve_range = 1) +   geom_stratum(aes(stratum = country), decreasing = FALSE, width = 1/2)  # }"},{"path":"/reference/geom_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Flows between lodes or strata — geom_flow","title":"Flows between lodes or strata — geom_flow","text":"geom_flow receives dataset horizontal (x) vertical (y, ymin, ymax) positions lodes alluvial plot, intersections alluvia strata. reconfigures alluvial segments connecting pairs corresponding lodes adjacent strata plots filled x-splines pair, using provided knot position parameter knot.pos, filled rectangles either end, using provided width.","code":""},{"path":"/reference/geom_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flows between lodes or strata — geom_flow","text":"","code":"geom_flow(   mapping = NULL,   data = NULL,   stat = \"flow\",   position = \"identity\",   width = 1/3,   knot.pos = 1/4,   knot.prop = TRUE,   curve_type = NULL,   curve_range = NULL,   segments = NULL,   outline.type = \"both\",   aes.flow = \"forward\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )  positions_to_flow(   x0,   x1,   ymin0,   ymax0,   ymin1,   ymax1,   kp0,   kp1,   knot.prop,   curve_type,   curve_range,   segments )"},{"path":"/reference/geom_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flows between lodes or strata — geom_flow","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data; override default. position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. width Numeric; width stratum, proportion distance axes. Defaults 1/3. knot.pos horizontal distance x-spline knots stratum (width/2 axis), either (knot.prop = TRUE, default) proportion length x-spline, .e. gap adjacent strata, (knot.prop = FALSE) scale x direction. knot.prop Logical; whether interpret knot.pos proportion length flow (default), rather x scale. curve_type Character; type curve used produce flows. Defaults \"xspline\" can alternatively set one \"linear\", \"cubic\", \"quintic\", \"sine\", \"arctangent\", \"sigmoid\". \"xspline\" produces approximation splines using 4 points per curve; alternatives produce interpolation splines points along graphs functions associated type. See Curves section. curve_range alternative curve_types based asymptotic functions, value along asymptote truncate function obtain shape scaled fit strata. See Curves section. segments number segments used drawing alternative curve (curved boundary flow). less 3, silently changed 3. outline.type Type outline alluvium; one \"\", \"lower\", \"upper\", \"full\". aes.flow Character; inter-lode flows assume aesthetics lodes. Options \"forward\" \"backward\". na.rm Logical: FALSE, default, NA lodes included; TRUE, NA lodes constitute separate category, plotted grey (regardless color scheme). show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... Additional arguments passed ggplot2::layer(). x0, x1, ymin0, ymax0, ymin1, ymax1, kp0, kp1 Numeric corner knot position data ribbon single flow.","code":""},{"path":"/reference/geom_flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flows between lodes or strata — geom_flow","text":"helper function positions_to_flow() takes corner knot positions curve parameters single flow input returns data frame x, y, shape used grid::xsplineGrob() render flow.","code":""},{"path":"/reference/geom_flow.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Flows between lodes or strata — geom_flow","text":"geom_alluvium, geom_flow, geom_lode, geom_stratum understand following aesthetics (required aesthetics bold): x y ymin ymax alpha colour fill linetype size group group used internally; arguments ignored. Alluvium, flow, lode geoms default alpha = 0.5. Learn setting aesthetics vignette(\"ggplot2-specs\", package = \"ggplot2\").","code":""},{"path":"/reference/geom_flow.html","id":"curves","dir":"Reference","previous_headings":"","what":"Curves","title":"Flows between lodes or strata — geom_flow","text":"default, geom_alluvium() geom_flow() render flows lodes filled regions parallel x-splines. graphical elements, generated using grid::xsplineGrob(), parameterized relative location knot (knot.pos). quick render clear read, users may prefer plots use differently-shaped ribbons. variety options documented , e.g., easing functions cheat sheet blog post Jeffrey Shaffer. Easing functions (yet) used ggalluvial, several alternative curves available. encoded continuous, increasing, bijective function unit interval \\([0,1]\\) , rescaled endpoints meet corresponding lodes. rendered piecewise-linearly, default using segments = 48. Summon curve type passing one following strings curve_type: \"linear\":     \\(f(x)=x\\), unique degree-1 polynomial takes 0 0 1 1 \"cubic\":      \\(f(x)=3x^{2}-2x^{3}\\), unique degree-3 polynomial also flat endpoints \"quintic\":    \\(f(x)=10x^{3}-15x^{4}+6x^{5}\\), unique degree-5 polynomial also zero curvature endpoints \"sine\":       unique sinusoidal function flat endpoints \"arctangent\": inverse tangent function, scaled re-centered unit interval interval centered zero radius curve_range \"sigmoid\":    sigmoid function, scaled re-centered unit interval interval centered zero radius curve_range (default) \"xspline\" option uses knot.* parameters, alternative curves use segments parameter, \"arctangent\" \"sigmoid\" use curve_range parameter. (ignored needed.) Larger values curve_range result greater compression steeper slopes. NULL default changed 2+sqrt(3) \"arctangent\" 6 \"sigmoid\". package-specific options set global values curve_type, curve_range, segments defaulted manually set: ggalluvial.curve_type: defaults \"xspline\". ggalluvial.curve_range: defaults NA, triggers curve-specific default values. ggalluvial.segments: defaults 48L. See base::options() use options.","code":""},{"path":"/reference/geom_flow.html","id":"defunct-parameters","dir":"Reference","previous_headings":"","what":"Defunct parameters","title":"Flows between lodes or strata — geom_flow","text":"previously defunct parameters axis_width ribbon_bend discontinued. Use width knot.pos instead.","code":""},{"path":[]},{"path":"/reference/geom_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flows between lodes or strata — geom_flow","text":"","code":"# use of strata and labels ggplot(as.data.frame(Titanic),        aes(y = Freq,            axis1 = Class, axis2 = Sex, axis3 = Age)) +   geom_flow() +   scale_x_discrete(limits = c(\"Class\", \"Sex\", \"Age\")) +   geom_stratum() +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +   ggtitle(\"Alluvial plot of Titanic passenger demographic data\")   # use of facets, with quintic flows ggplot(as.data.frame(Titanic),        aes(y = Freq,            axis1 = Class, axis2 = Sex)) +   geom_flow(aes(fill = Age), width = .4, curve_type = \"quintic\") +   geom_stratum(width = .4) +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum)), size = 3) +   scale_x_discrete(limits = c(\"Class\", \"Sex\")) +   facet_wrap(~ Survived, scales = \"fixed\")   # time series alluvia of WorldPhones data wph <- as.data.frame(as.table(WorldPhones)) names(wph) <- c(\"Year\", \"Region\", \"Telephones\") ggplot(wph,        aes(x = Year, alluvium = Region, y = Telephones)) +   geom_flow(aes(fill = Region, colour = Region),             width = 0, outline.type = \"full\")  # treat 'Year' as a number rather than as a factor wph$Year <- as.integer(as.character(wph$Year)) ggplot(wph,        aes(x = Year, alluvium = Region, y = Telephones)) +   geom_flow(aes(fill = Region, colour = Region),             width = 0, outline.type = \"upper\")  # hold the knot positions fixed ggplot(wph,        aes(x = Year, alluvium = Region, y = Telephones)) +   geom_flow(aes(fill = Region, colour = Region),             width = 0, outline.type = \"lower\", knot.prop = FALSE)   # \\donttest{ # rightward flow aesthetics for vaccine survey data, with cubic flows data(vaccinations) vaccinations$response <- factor(vaccinations$response,                                 rev(levels(vaccinations$response))) # annotate with proportional counts ggplot(vaccinations,        aes(x = survey, stratum = response, alluvium = subject,            y = freq, fill = response)) +   geom_lode() + geom_flow(curve_type = \"cubic\") +   geom_stratum(alpha = 0) +   geom_text(stat = \"stratum\", aes(label = round(after_stat(prop), 3)))  # annotate fixed-width ribbons with counts ggplot(vaccinations,        aes(x = survey, stratum = response, alluvium = subject,            weight = freq, fill = response)) +   geom_lode() + geom_flow(curve_type = \"cubic\") +   geom_stratum(alpha = 0) +   geom_text(stat = \"flow\",             aes(label = after_stat(n),                 hjust = (after_stat(flow) == \"to\")))  # }"},{"path":"/reference/geom_lode.html","id":null,"dir":"Reference","previous_headings":"","what":"Lodes at intersections of alluvia and strata — geom_lode","title":"Lodes at intersections of alluvia and strata — geom_lode","text":"geom_alluvium receives dataset horizontal (x) vertical (y, ymin, ymax) positions lodes alluvial plot, intersections alluvia strata. plots rectangles lodes provided width.","code":""},{"path":"/reference/geom_lode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lodes at intersections of alluvia and strata — geom_lode","text":"","code":"geom_lode(   mapping = NULL,   data = NULL,   stat = \"alluvium\",   position = \"identity\",   width = 1/3,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"/reference/geom_lode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lodes at intersections of alluvia and strata — geom_lode","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data; override default. position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. width Numeric; width stratum, proportion distance axes. Defaults 1/3. na.rm Logical: FALSE, default, NA lodes included; TRUE, NA lodes constitute separate category, plotted grey (regardless color scheme). show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... Additional arguments passed ggplot2::layer().","code":""},{"path":"/reference/geom_lode.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Lodes at intersections of alluvia and strata — geom_lode","text":"geom_alluvium, geom_flow, geom_lode, geom_stratum understand following aesthetics (required aesthetics bold): x y ymin ymax alpha colour fill linetype size group group used internally; arguments ignored. Alluvium, flow, lode geoms default alpha = 0.5. Learn setting aesthetics vignette(\"ggplot2-specs\", package = \"ggplot2\").","code":""},{"path":"/reference/geom_lode.html","id":"defunct-parameters","dir":"Reference","previous_headings":"","what":"Defunct parameters","title":"Lodes at intersections of alluvia and strata — geom_lode","text":"previously defunct parameters axis_width ribbon_bend discontinued. Use width knot.pos instead.","code":""},{"path":[]},{"path":"/reference/geom_lode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lodes at intersections of alluvia and strata — geom_lode","text":"","code":"# one axis ggplot(as.data.frame(Titanic),        aes(y = Freq,            axis = Class)) +   geom_lode(aes(fill = Class, alpha = Survived)) +   scale_x_discrete(limits = c(\"Class\")) +   scale_alpha_manual(values = c(.25, .75))   gg <- ggplot(as.data.frame(Titanic),              aes(y = Freq,                  axis1 = Class, axis2 = Sex, axis3 = Age,                  fill = Survived)) # alluvia and lodes gg + geom_alluvium() + geom_lode()  # lodes as strata gg + geom_alluvium() +   geom_stratum(stat = \"alluvium\")"},{"path":"/reference/geom_stratum.html","id":null,"dir":"Reference","previous_headings":"","what":"Strata at axes — geom_stratum","title":"Strata at axes — geom_stratum","text":"geom_stratum receives dataset horizontal (x) vertical (y, ymin, ymax) positions strata alluvial plot. plots rectangles strata provided width.","code":""},{"path":"/reference/geom_stratum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strata at axes — geom_stratum","text":"","code":"geom_stratum(   mapping = NULL,   data = NULL,   stat = \"stratum\",   position = \"identity\",   show.legend = NA,   inherit.aes = TRUE,   width = 1/3,   na.rm = FALSE,   ... )"},{"path":"/reference/geom_stratum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strata at axes — geom_stratum","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data; override default. position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). width Numeric; width stratum, proportion distance axes. Defaults 1/3. na.rm Logical: FALSE, default, NA lodes included; TRUE, NA lodes constitute separate category, plotted grey (regardless color scheme). ... Additional arguments passed ggplot2::layer().","code":""},{"path":"/reference/geom_stratum.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Strata at axes — geom_stratum","text":"geom_alluvium, geom_flow, geom_lode, geom_stratum understand following aesthetics (required aesthetics bold): x y ymin ymax alpha colour fill linetype size group group used internally; arguments ignored. Alluvium, flow, lode geoms default alpha = 0.5. Learn setting aesthetics vignette(\"ggplot2-specs\", package = \"ggplot2\").","code":""},{"path":"/reference/geom_stratum.html","id":"defunct-parameters","dir":"Reference","previous_headings":"","what":"Defunct parameters","title":"Strata at axes — geom_stratum","text":"previously defunct parameters axis_width ribbon_bend discontinued. Use width knot.pos instead.","code":""},{"path":[]},{"path":"/reference/geom_stratum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strata at axes — geom_stratum","text":"","code":"# full axis width ggplot(as.data.frame(Titanic),        aes(y = Freq,            axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +   geom_stratum(width = 1) +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +   scale_x_discrete(limits = c(\"Class\", \"Sex\", \"Age\", \"Survived\"))     # use of facets ggplot(as.data.frame(Titanic),        aes(y = Freq,            axis1 = Class, axis2 = Sex)) +   geom_flow(aes(fill = Survived)) +   geom_stratum() +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +   scale_x_discrete(limits = c(\"Class\", \"Sex\")) +   facet_wrap(~ Age, scales = \"free_y\")"},{"path":"/reference/ggalluvial-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — ggalluvial-deprecated","title":"Deprecated functions — ggalluvial-deprecated","text":"functions deprecated current version may removed future version.","code":""},{"path":"/reference/ggalluvial-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — ggalluvial-deprecated","text":"","code":"is_alluvial(data, ..., silent = FALSE)  is_alluvial_lodes(...)  is_alluvial_alluvia(...)  to_lodes(...)  to_alluvia(...)"},{"path":"/reference/ggalluvial-deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated functions — ggalluvial-deprecated","text":"Use is_*_form instead is_alluvial is_alluvial_*. Use to_*_form instead to_*.","code":""},{"path":"/reference/ggalluvial-ggproto.html","id":null,"dir":"Reference","previous_headings":"","what":"Base ggproto classes for ggalluvial — GeomAlluvium","title":"Base ggproto classes for ggalluvial — GeomAlluvium","text":"Base ggproto classes ggalluvial","code":""},{"path":"/reference/ggalluvial-ggproto.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Base ggproto classes for ggalluvial — GeomAlluvium","text":"object class GeomAlluvium (inherits Geom, ggproto, gg) length 8. object class GeomFlow (inherits Geom, ggproto, gg) length 8. object class GeomLode (inherits Geom, ggproto, gg) length 6. object class GeomStratum (inherits GeomRect, Geom, ggproto, gg) length 6. object class StatAlluvium (inherits Stat, ggproto, gg) length 6. object class StatFlow (inherits Stat, ggproto, gg) length 7. object class StatStratum (inherits Stat, ggproto, gg) length 5.","code":""},{"path":[]},{"path":"/reference/ggalluvial-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggalluvial: Alluvial Plots in 'ggplot2' — ggalluvial-package","title":"ggalluvial: Alluvial Plots in 'ggplot2' — ggalluvial-package","text":"Alluvial plots use variable-width ribbons stacked bar plots represent multi-dimensional repeated-measures data categorical ordinal variables; see Riehmann, Hanfler, Froehlich (2005) doi:10.1109/INFVIS.2005.1532152  Rosvall Bergstrom (2010) doi:10.1371/journal.pone.0008694 . Alluvial plots statistical graphics sense Wilkinson (2006) doi:10.1007/0-387-28695-0 ; share elements Sankey diagrams parallel sets plots uniquely determined data small set parameters. package extends Wickham's (2010) doi:10.1198/jcgs.2009.07098  layered grammar graphics generate alluvial plots tidy data.","code":""},{"path":"/reference/ggalluvial-package.html","id":"acknowledgments","dir":"Reference","previous_headings":"","what":"Acknowledgments","title":"ggalluvial: Alluvial Plots in 'ggplot2' — ggalluvial-package","text":"Many users identified problems suggested improvements via email GitHub issue tracker. Development benefitted use equipment support colleagues UConn Health UF Health.","code":""},{"path":[]},{"path":"/reference/ggalluvial-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggalluvial: Alluvial Plots in 'ggplot2' — ggalluvial-package","text":"Maintainer: Jason Cory Brunson cornelioid@gmail.com Authors: Quentin D. Read","code":""},{"path":"/reference/lode-guidance-functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Lode guidance functions — lode-guidance-functions","title":"Lode guidance functions — lode-guidance-functions","text":"functions control order lodes within strata alluvial diagram. invoked stat_alluvium() can passed lode.guidance parameter.","code":""},{"path":"/reference/lode-guidance-functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lode guidance functions — lode-guidance-functions","text":"","code":"lode_zigzag(n, i)  lode_zagzig(n, i)  lode_forward(n, i)  lode_rightward(n, i)  lode_backward(n, i)  lode_leftward(n, i)  lode_frontback(n, i)  lode_rightleft(n, i)  lode_backfront(n, i)  lode_leftright(n, i)"},{"path":"/reference/lode-guidance-functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lode guidance functions — lode-guidance-functions","text":"n Numeric, positive integer Numeric, positive integer n","code":""},{"path":"/reference/lode-guidance-functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lode guidance functions — lode-guidance-functions","text":"function orders numbers 1 n, starting index . choice function made stat_alluvium() determines order axes contribute sorting lodes within index axis. starting , functions order remaining axes follows: zigzag: Zigzag outward , starting outward direction zigzag: Zigzag outward , starting inward direction forward: Increasing order (alias rightward) backward: Decreasing order (alias leftward) frontback: Proceed forward n, backward 1 (alias rightleft) backfront: Proceed backward 1, forward n (alias leftright) extended discussion strata lodes arranged alluvial plots, including effects different lode guidance functions, can found vignette \"Order Rectangles\" via vignette(\"order-rectangles\", package = \"ggalluvial\").","code":""},{"path":"/reference/majors.html","id":null,"dir":"Reference","previous_headings":"","what":"Students' declared majors across several semesters — majors","title":"Students' declared majors across several semesters — majors","text":"data set follows major curricula 10 students across 8 academic semesters. Missing values indicate undeclared majors. data kindly contributed Dario Bonaretti.","code":""},{"path":"/reference/majors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Students' declared majors across several semesters — majors","text":"data frame 80 rows 3 variables: student student identifier semester character tag odd-numbered semesters curriculum declared major program","code":""},{"path":"/reference/self-adjoin.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjoin a dataset to itself — self-adjoin","title":"Adjoin a dataset to itself — self-adjoin","text":"function binds dataset along adjacent pairs key variable. invoked geom_flow() convert data lodes form something similar alluvia form.","code":""},{"path":"/reference/self-adjoin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjoin a dataset to itself — self-adjoin","text":"","code":"self_adjoin(   data,   key,   by = NULL,   link = NULL,   keep.x = NULL,   keep.y = NULL,   suffix = c(\".x\", \".y\") )"},{"path":"/reference/self-adjoin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjoin a dataset to itself — self-adjoin","text":"data data frame lodes form (repeated measures data; see alluvial-data). key Column data indicating sequential collection; handled tidyr::spread(). Character vector variables self-adjoin ; passed dplyr::mutate-joins functions. link Character vector variables adjoin. replaced pairs variables suffixed suffix. keep.x, keep.y Character vector variables associate first (respectively, second) copy data adjoining. variables can overlap overlap link. suffix Suffixes add adjoined link variables; passed dplyr::mutate-joins functions.","code":""},{"path":"/reference/self-adjoin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjoin a dataset to itself — self-adjoin","text":"self_adjoin invokes dplyr::mutate-joins functions order convert dataset measures along discrete key variable dataset consisting column bindings measures (variables) along adjacent values key.","code":""},{"path":[]},{"path":"/reference/self-adjoin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjoin a dataset to itself — self-adjoin","text":"","code":"# self-adjoin `majors` data data(majors) major_changes <- self_adjoin(majors, key = semester,                              by = \"student\", link = c(\"semester\", \"curriculum\")) major_changes$change <- major_changes$curriculum.x == major_changes$curriculum.y head(major_changes) #>    step student semester.x curriculum.x semester.y curriculum.y change #> 1 CURR1       1      CURR1     Painting      CURR3     Painting   TRUE #> 2 CURR1       2      CURR1     Painting      CURR3     Painting   TRUE #> 3 CURR1       6      CURR1     Sculpure      CURR3     Sculpure   TRUE #> 4 CURR1       8      CURR1     Painting      CURR3     Painting   TRUE #> 5 CURR1       9      CURR1     Sculpure      CURR3  Art History  FALSE #> 6 CURR1      10      CURR1     Painting      CURR3     Painting   TRUE  # self-adjoin `vaccinations` data data(vaccinations) vaccination_steps <- self_adjoin(vaccinations, key = survey, by = \"subject\",                                  link = c(\"survey\", \"response\"),                                  keep.x = c(\"freq\")) head(vaccination_steps) #>        step subject  survey.x response.x freq  survey.y response.y #> 1 ms153_NSA       1 ms153_NSA     Always   48 ms432_NSA     Always #> 2 ms153_NSA       2 ms153_NSA     Always    9 ms432_NSA     Always #> 3 ms153_NSA       3 ms153_NSA     Always   66 ms432_NSA    Missing #> 4 ms153_NSA       4 ms153_NSA     Always    1 ms432_NSA    Missing #> 5 ms153_NSA       5 ms153_NSA     Always   11 ms432_NSA    Missing #> 6 ms153_NSA       6 ms153_NSA     Always    1 ms432_NSA      Never vaccination_steps <- self_adjoin(vaccinations, key = survey, by = \"subject\",                                  link = c(\"survey\", \"response\"),                                  keep.x = c(\"freq\"),                                  keep.y = c(\"start_date\", \"end_date\")) head(vaccination_steps) #>        step subject  survey.x response.x freq  survey.y response.y start_date #> 1 ms153_NSA       1 ms153_NSA     Always   48 ms432_NSA     Always 2015-06-04 #> 2 ms153_NSA       2 ms153_NSA     Always    9 ms432_NSA     Always 2015-06-04 #> 3 ms153_NSA       3 ms153_NSA     Always   66 ms432_NSA    Missing 2015-06-04 #> 4 ms153_NSA       4 ms153_NSA     Always    1 ms432_NSA    Missing 2015-06-04 #> 5 ms153_NSA       5 ms153_NSA     Always   11 ms432_NSA    Missing 2015-06-04 #> 6 ms153_NSA       6 ms153_NSA     Always    1 ms432_NSA      Never 2015-06-04 #>     end_date #> 1 2015-10-05 #> 2 2015-10-05 #> 3 2015-10-05 #> 4 2015-10-05 #> 5 2015-10-05 #> 6 2015-10-05"},{"path":"/reference/stat_alluvium.html","id":null,"dir":"Reference","previous_headings":"","what":"Alluvial positions — stat_alluvium","title":"Alluvial positions — stat_alluvium","text":"Given dataset alluvial structure, stat_alluvium calculates centroids (x y) heights (ymin ymax) lodes, intersections alluvia strata. leverages group aesthetic plotting purposes (now).","code":""},{"path":"/reference/stat_alluvium.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alluvial positions — stat_alluvium","text":"","code":"stat_alluvium(   mapping = NULL,   data = NULL,   geom = \"alluvium\",   position = \"identity\",   decreasing = NULL,   reverse = NULL,   absolute = NULL,   discern = FALSE,   negate.strata = NULL,   aggregate.y = NULL,   cement.alluvia = NULL,   lode.guidance = NULL,   lode.ordering = NULL,   aes.bind = NULL,   infer.label = FALSE,   min.y = NULL,   max.y = NULL,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"/reference/stat_alluvium.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alluvial positions — stat_alluvium","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data; override default. position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. decreasing Logical; whether arrange strata axis order variable values (NA, default), ascending order totals (largest top, FALSE), descending order totals (largest bottom, TRUE). reverse Logical; decreasing NA, whether arrange strata axis reverse order variable values, match order values legend. Ignored decreasing NA. Defaults TRUE. absolute Logical; cases strata negative, whether arrange (respecting decreasing reverse) using negative absolute values y. discern Passed to_lodes_form() data alluvia format. negate.strata vector values stratum aesthetic treated negative (ignore missing values warning). aggregate.y Deprecated alias cement.alluvia. cement.alluvia Logical value indicating whether aggregate y values equivalent alluvia computing lode flow positions. lode.guidance function prioritize axis variables ordering lodes within stratum, else character string identifying function. Character options \"zigzag\", \"frontback\", \"backfront\", \"forward\", \"backward\" (see lode-guidance-functions). lode.ordering Deprecated favor order aesthetic. list (length number axes) integer vectors (length number rows data) NULL entries (indicating imposed ordering), else numeric matrix corresponding dimensions, giving preferred ordering alluvia axis. used order lodes within stratum sorting lodes first stratum, provided vectors, lastly remaining factors (vectors contain duplicate entries therefore completely determine lode orderings). aes.bind grouping level, , prioritize differentiation aesthetics ordering lodes within stratum. Defaults \"none\" (aesthetic binding) intermediate option \"flows\" bind aesthetics stratifying axes linked index axis (one adjacent axis stat_flow(); remaining axes stat_alluvium()) strongest option \"alluvia\" bind aesthetics stratifying index axis stratifying linked axes (available stat_alluvium()). Stratification axis done respect strata axis, separating positive negative strata, consistent values decreasing, reverse, absolute. Thus, \"none\", lode orderings depend aesthetic variables. aesthetic variables used, order specified aes(). infer.label Logical; whether assign stratum alluvium variable label aesthetic. Defaults FALSE, requires label aesthetic assigned. parameter intended use data alluva form, converted lode form statistical transformation. Deprecated; use ggplot2::after_stat() instead. min.y, max.y Numeric; bounds heights strata rendered. Use bounds exclude strata outside certain range, example labeling strata using ggplot2::geom_text(). na.rm Logical: FALSE, default, NA lodes included; TRUE, NA lodes constitute separate category, plotted grey (regardless color scheme). show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... Additional arguments passed ggplot2::layer().","code":""},{"path":"/reference/stat_alluvium.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Alluvial positions — stat_alluvium","text":"stat_alluvium, stat_flow, stat_stratum require one two sets aesthetics: x least one alluvium stratum number axis[0-9]* (axis1, axis2, etc.) Use x, alluvium, /stratum data lodes format axis[0-9]* data alluvia format (see alluvial-data). Arguments parameters inconsistent format ignored. Additionally, stat_*() accepts following optional aesthetics: y weight order group label y controls heights alluvia, may aggregated across equivalent observations. weight applies computed variables (see section ) affect positional aesthetics. order, recognized stat_alluvium() stat_flow(), used arrange lodes within stratum. tolerates duplicates takes precedence differentiation aesthetics (aes.bind \"none\") lode guidance respect remaining axes. (replaces deprecated parameter lode.ordering.) group used internally; arguments ignored. label used label strata lodes must take unique value across observations within stratum lode. aesthetics aggregated follows: Numeric aesthetics, including y, summed. Character factor aesthetics, including label, assigned strata lodes provided take unique values across observations within (otherwise assigned NA).","code":""},{"path":"/reference/stat_alluvium.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Alluvial positions — stat_alluvium","text":"can used ggplot2::after_stat() control aesthetic evaluation. n number cases lode count cumulative weight lode prop weighted proportion lode stratum value variable used define strata deposit order (signed) strata deposited lode lode label distilled alluvia (stat_alluvium() stat_flow() ) flow direction flow \"\" \"\" axis (stat_flow() ) numerical variables n, count, prop calculated data grouped x weighted weight (addition y). integer variable deposit used internally sort data calculating heights. character variable lode obtained alluvium according distill.","code":""},{"path":"/reference/stat_alluvium.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"Alluvial positions — stat_alluvium","text":"stat_stratum, stat_alluvium, stat_flow order strata lodes according values several parameters, must held fixed across every layer alluvial plot. package-specific options set global values parameters defaulted manually set: ggalluvial.decreasing (stat_*): defaults NA. ggalluvial.reverse (stat_*): defaults TRUE. ggalluvial.absolute (stat_*): defaults TRUE. ggalluvial.cement.alluvia (stat_alluvium): defaults FALSE. ggalluvial.lode.guidance (stat_alluvium): defaults \"zigzag\". ggalluvial.aes.bind (stat_alluvium stat_flow): defaults \"none\". See base::options() use options.","code":""},{"path":"/reference/stat_alluvium.html","id":"defunct-parameters","dir":"Reference","previous_headings":"","what":"Defunct parameters","title":"Alluvial positions — stat_alluvium","text":"previously defunct parameters weight aggregate.wts discontinued. Use y cement.alluvia instead.","code":""},{"path":[]},{"path":"/reference/stat_alluvium.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alluvial positions — stat_alluvium","text":"","code":"# illustrate positioning ggplot(as.data.frame(Titanic),        aes(y = Freq,            axis1 = Class, axis2 = Sex, axis3 = Age,            color = Survived)) +   stat_stratum(geom = \"errorbar\") +   geom_line(stat = \"alluvium\") +   stat_alluvium(geom = \"pointrange\") +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +   scale_x_discrete(limits = c(\"Class\", \"Sex\", \"Age\"))   # lode ordering examples gg <- ggplot(as.data.frame(Titanic),              aes(y = Freq,                  axis1 = Class, axis2 = Sex, axis3 = Age)) +   geom_stratum() +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +   scale_x_discrete(limits = c(\"Class\", \"Sex\", \"Age\")) # use of lode controls gg + geom_flow(aes(fill = Survived, alpha = Sex), stat = \"alluvium\",                lode.guidance = \"forward\") #> Warning: Using alpha for a discrete variable is not advised.  # prioritize aesthetic binding gg + geom_flow(aes(fill = Survived, alpha = Sex), stat = \"alluvium\",                aes.bind = \"alluvia\", lode.guidance = \"forward\") #> Warning: Using alpha for a discrete variable is not advised.  # use of custom lode order gg + geom_flow(aes(fill = Survived, alpha = Sex, order = sample(x = 32)),                stat = \"alluvium\") #> Warning: Ignoring unknown aesthetics: order #> Warning: Using alpha for a discrete variable is not advised.  # use of custom luide guidance function lode_custom <- function(n, i) {   stopifnot(n == 3)   switch(     i,     `1` = 1:3,     `2` = c(2, 3, 1),     `3` = 3:1   ) } gg + geom_flow(aes(fill = Survived, alpha = Sex), stat = \"alluvium\",                aes.bind = \"flow\", lode.guidance = lode_custom) #> Warning: Using alpha for a discrete variable is not advised.   # omit missing elements & reverse the `y` axis ggplot(ggalluvial::majors,        aes(x = semester, stratum = curriculum, alluvium = student, y = 1)) +   geom_alluvium(fill = \"darkgrey\", na.rm = TRUE) +   geom_stratum(aes(fill = curriculum), color = NA, na.rm = TRUE) +   theme_bw() +   scale_y_reverse()   # \\donttest{ # alluvium cementation examples gg <- ggplot(ggalluvial::majors,              aes(x = semester, stratum = curriculum, alluvium = student,                  fill = curriculum)) +   geom_stratum() # diagram with outlined alluvia and labels gg + geom_flow(stat = \"alluvium\", color = \"black\") +   geom_text(aes(label = after_stat(lode)), stat = \"alluvium\")  # cemented diagram with default distillation (first most common alluvium) gg +   geom_flow(stat = \"alluvium\", color = \"black\", cement.alluvia = TRUE) +   geom_text(aes(label = after_stat(lode)), stat = \"alluvium\",             cement.alluvia = TRUE)  # cemented diagram with custom label distillation gg +   geom_flow(stat = \"alluvium\", color = \"black\", cement.alluvia = TRUE) +   geom_text(aes(label = after_stat(lode)), stat = \"alluvium\",             cement.alluvia = TRUE,             distill = function(x) paste(x, collapse = \"; \"))  # }  # \\donttest{ data(babynames, package = \"babynames\") #> Error in find.package(package, lib.loc, verbose = verbose): there is no package called ‘babynames’ # a discontiguous alluvium bn <- subset(babynames, prop >= .01 & sex == \"F\" & year > 1962 & year < 1968) #> Error: object 'babynames' not found ggplot(data = bn,        aes(x = year, alluvium = name, y = prop)) +   geom_alluvium(aes(fill = name, color = name == \"Tammy\"),                 decreasing = TRUE, show.legend = FALSE) +   scale_color_manual(values = c(\"#00000000\", \"#000000\")) #> Error: object 'bn' not found # expanded to include missing values bn2 <- merge(bn,              expand.grid(year = unique(bn$year), name = unique(bn$name)),              all = TRUE) #> Error: object 'bn' not found ggplot(data = bn2,        aes(x = year, alluvium = name, y = prop)) +   geom_alluvium(aes(fill = name, color = name == \"Tammy\"),                 decreasing = TRUE, show.legend = FALSE) +   scale_color_manual(values = c(\"#00000000\", \"#000000\")) #> Error: object 'bn2' not found # with missing values filled in with zeros bn2$prop[is.na(bn2$prop)] <- 0 #> Error: object 'bn2' not found ggplot(data = bn2,        aes(x = year, alluvium = name, y = prop)) +   geom_alluvium(aes(fill = name, color = name == \"Tammy\"),                 decreasing = TRUE, show.legend = FALSE) +   scale_color_manual(values = c(\"#00000000\", \"#000000\")) #> Error: object 'bn2' not found # }  # use negative y values to encode deaths versus survivals titanic <- as.data.frame(Titanic) titanic <- transform(titanic, Lives = Freq * (-1) ^ (Survived == \"No\")) ggplot(subset(titanic, Class != \"Crew\"),        aes(axis1 = Class, axis2 = Sex, axis3 = Age, y = Lives)) +   geom_alluvium(aes(alpha = Survived, fill = Class), absolute = FALSE) +   geom_stratum(absolute = FALSE) +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum)),             absolute = FALSE) +   scale_x_discrete(limits = c(\"Class\", \"Sex\", \"Age\"), expand = c(.1, .05)) +   scale_alpha_discrete(range = c(.25, .75), guide = \"none\") #> Warning: Using alpha for a discrete variable is not advised.   # faceting with common alluvia ggplot(titanic, aes(y = Freq, axis1 = Class, axis2 = Sex, axis3 = Age)) +   facet_wrap(~ Survived) +   geom_alluvium() +   geom_stratum() +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum)))  ggplot(transform(alluvial::Refugees, id = 1),        aes(y = refugees, x = year, alluvium = id)) +   facet_wrap(~ country) +   geom_alluvium(alpha = .75, color = \"darkgrey\") +   scale_x_continuous(breaks = seq(2004, 2012, 4))"},{"path":"/reference/stat_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Flow positions — stat_flow","title":"Flow positions — stat_flow","text":"Given dataset alluvial structure, stat_flow calculates centroids (x y) heights (ymin ymax) flows pair adjacent axes.","code":""},{"path":"/reference/stat_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flow positions — stat_flow","text":"","code":"stat_flow(   mapping = NULL,   data = NULL,   geom = \"flow\",   position = \"identity\",   decreasing = NULL,   reverse = NULL,   absolute = NULL,   discern = FALSE,   negate.strata = NULL,   aes.bind = NULL,   infer.label = FALSE,   min.y = NULL,   max.y = NULL,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"/reference/stat_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flow positions — stat_flow","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data; override default. position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. decreasing Logical; whether arrange strata axis order variable values (NA, default), ascending order totals (largest top, FALSE), descending order totals (largest bottom, TRUE). reverse Logical; decreasing NA, whether arrange strata axis reverse order variable values, match order values legend. Ignored decreasing NA. Defaults TRUE. absolute Logical; cases strata negative, whether arrange (respecting decreasing reverse) using negative absolute values y. discern Passed to_lodes_form() data alluvia format. negate.strata vector values stratum aesthetic treated negative (ignore missing values warning). aes.bind grouping level, , prioritize differentiation aesthetics ordering lodes within stratum. Defaults \"none\" (aesthetic binding) intermediate option \"flows\" bind aesthetics stratifying axes linked index axis (one adjacent axis stat_flow(); remaining axes stat_alluvium()) strongest option \"alluvia\" bind aesthetics stratifying index axis stratifying linked axes (available stat_alluvium()). Stratification axis done respect strata axis, separating positive negative strata, consistent values decreasing, reverse, absolute. Thus, \"none\", lode orderings depend aesthetic variables. aesthetic variables used, order specified aes(). infer.label Logical; whether assign stratum alluvium variable label aesthetic. Defaults FALSE, requires label aesthetic assigned. parameter intended use data alluva form, converted lode form statistical transformation. Deprecated; use ggplot2::after_stat() instead. min.y, max.y Numeric; bounds heights strata rendered. Use bounds exclude strata outside certain range, example labeling strata using ggplot2::geom_text(). na.rm Logical: FALSE, default, NA lodes included; TRUE, NA lodes constitute separate category, plotted grey (regardless color scheme). show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... Additional arguments passed ggplot2::layer().","code":""},{"path":"/reference/stat_flow.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Flow positions — stat_flow","text":"stat_alluvium, stat_flow, stat_stratum require one two sets aesthetics: x least one alluvium stratum number axis[0-9]* (axis1, axis2, etc.) Use x, alluvium, /stratum data lodes format axis[0-9]* data alluvia format (see alluvial-data). Arguments parameters inconsistent format ignored. Additionally, stat_*() accepts following optional aesthetics: y weight order group label y controls heights alluvia, may aggregated across equivalent observations. weight applies computed variables (see section ) affect positional aesthetics. order, recognized stat_alluvium() stat_flow(), used arrange lodes within stratum. tolerates duplicates takes precedence differentiation aesthetics (aes.bind \"none\") lode guidance respect remaining axes. (replaces deprecated parameter lode.ordering.) group used internally; arguments ignored. label used label strata lodes must take unique value across observations within stratum lode. aesthetics aggregated follows: Numeric aesthetics, including y, summed. Character factor aesthetics, including label, assigned strata lodes provided take unique values across observations within (otherwise assigned NA).","code":""},{"path":"/reference/stat_flow.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Flow positions — stat_flow","text":"can used ggplot2::after_stat() control aesthetic evaluation. n number cases lode count cumulative weight lode prop weighted proportion lode stratum value variable used define strata deposit order (signed) strata deposited lode lode label distilled alluvia (stat_alluvium() stat_flow() ) flow direction flow \"\" \"\" axis (stat_flow() ) numerical variables n, count, prop calculated data grouped x weighted weight (addition y). integer variable deposit used internally sort data calculating heights. character variable lode obtained alluvium according distill.","code":""},{"path":"/reference/stat_flow.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"Flow positions — stat_flow","text":"stat_stratum, stat_alluvium, stat_flow order strata lodes according values several parameters, must held fixed across every layer alluvial plot. package-specific options set global values parameters defaulted manually set: ggalluvial.decreasing (stat_*): defaults NA. ggalluvial.reverse (stat_*): defaults TRUE. ggalluvial.absolute (stat_*): defaults TRUE. ggalluvial.cement.alluvia (stat_alluvium): defaults FALSE. ggalluvial.lode.guidance (stat_alluvium): defaults \"zigzag\". ggalluvial.aes.bind (stat_alluvium stat_flow): defaults \"none\". See base::options() use options.","code":""},{"path":"/reference/stat_flow.html","id":"defunct-parameters","dir":"Reference","previous_headings":"","what":"Defunct parameters","title":"Flow positions — stat_flow","text":"previously defunct parameters weight aggregate.wts discontinued. Use y cement.alluvia instead.","code":""},{"path":[]},{"path":"/reference/stat_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flow positions — stat_flow","text":"","code":"# illustrate positioning ggplot(as.data.frame(Titanic),        aes(y = Freq,            axis1 = Class, axis2 = Sex, axis3 = Age,            color = Survived)) +   stat_stratum(geom = \"errorbar\") +   geom_line(stat = \"flow\") +   stat_flow(geom = \"pointrange\") +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +   scale_x_discrete(limits = c(\"Class\", \"Sex\", \"Age\"))   # alluvium--flow comparison data(vaccinations) gg <- ggplot(vaccinations,              aes(x = survey, stratum = response, alluvium = subject,                  y = freq, fill = response)) +   geom_stratum(alpha = .5) +   geom_text(aes(label = response), stat = \"stratum\") # rightward alluvial aesthetics for vaccine survey data gg + geom_flow(stat = \"alluvium\", lode.guidance = \"forward\")  # memoryless flows for vaccine survey data gg + geom_flow()   # size filter examples gg <- ggplot(vaccinations,        aes(y = freq,            x = survey, stratum = response, alluvium = subject,            fill = response, label = response)) +   stat_stratum(alpha = .5) +   geom_text(stat = \"stratum\") # omit small flows gg + geom_flow(min.y = 50)  # omit large flows gg + geom_flow(max.y = 100)   # negate missing entries ggplot(vaccinations,        aes(y = freq,            x = survey, stratum = response, alluvium = subject,            fill = response, label = response,            alpha = response != \"Missing\")) +   stat_stratum(negate.strata = \"Missing\") +   geom_flow(negate.strata = \"Missing\") +   geom_text(stat = \"stratum\", alpha = 1, negate.strata = \"Missing\") +   scale_alpha_discrete(range = c(.2, .6)) +   guides(alpha = \"none\") #> Warning: Using alpha for a discrete variable is not advised.   # \\donttest{ # aesthetics that vary betwween and within strata data(vaccinations) vaccinations$subgroup <- LETTERS[1:2][rbinom(   n = length(unique(vaccinations$subject)), size = 1, prob = .5 ) + 1][vaccinations$subject] ggplot(vaccinations,        aes(x = survey, stratum = response, alluvium = subject,            y = freq, fill = response, label = response)) +   geom_flow(aes(alpha = subgroup)) +   scale_alpha_discrete(range = c(1/3, 2/3)) +   geom_stratum(alpha = .5) +   geom_text(stat = \"stratum\") #> Warning: Using alpha for a discrete variable is not advised.  # can even set aesthetics that vary both ways ggplot(vaccinations,        aes(x = survey, stratum = response, alluvium = subject,            y = freq, label = response)) +   geom_flow(aes(fill = interaction(response, subgroup)), aes.bind = \"flows\") +   scale_alpha_discrete(range = c(1/3, 2/3)) +   geom_stratum(alpha = .5) +   geom_text(stat = \"stratum\") #> Warning: Using alpha for a discrete variable is not advised.  # }"},{"path":"/reference/stat_stratum.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratum positions — stat_stratum","title":"Stratum positions — stat_stratum","text":"Given dataset alluvial structure, stat_stratum calculates centroids (x y) heights (ymin ymax) strata axis.","code":""},{"path":"/reference/stat_stratum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratum positions — stat_stratum","text":"","code":"stat_stratum(   mapping = NULL,   data = NULL,   geom = \"stratum\",   position = \"identity\",   decreasing = NULL,   reverse = NULL,   absolute = NULL,   discern = FALSE,   distill = \"first\",   negate.strata = NULL,   infer.label = FALSE,   label.strata = NULL,   min.y = NULL,   max.y = NULL,   min.height = NULL,   max.height = NULL,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"/reference/stat_stratum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratum positions — stat_stratum","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data; override default. position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. decreasing Logical; whether arrange strata axis order variable values (NA, default), ascending order totals (largest top, FALSE), descending order totals (largest bottom, TRUE). reverse Logical; decreasing NA, whether arrange strata axis reverse order variable values, match order values legend. Ignored decreasing NA. Defaults TRUE. absolute Logical; cases strata negative, whether arrange (respecting decreasing reverse) using negative absolute values y. discern Passed to_lodes_form() data alluvia format. distill function (name) used distill alluvium values single lode label, accessible via ggplot2::after_stat() (similar behavior to_alluvia_form()). recognizes three character values: \"first\" (default) \"last\" defined dplyr; \"\" (returns first modal value). negate.strata vector values stratum aesthetic treated negative (ignore missing values warning). infer.label Logical; whether assign stratum alluvium variable label aesthetic. Defaults FALSE, requires label aesthetic assigned. parameter intended use data alluva form, converted lode form statistical transformation. Deprecated; use ggplot2::after_stat() instead. label.strata Defunct; alias infer.label. min.y, max.y Numeric; bounds heights strata rendered. Use bounds exclude strata outside certain range, example labeling strata using ggplot2::geom_text(). min.height, max.height Deprecated aliases min.y max.y. na.rm Logical: FALSE, default, NA lodes included; TRUE, NA lodes constitute separate category, plotted grey (regardless color scheme). show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... Additional arguments passed ggplot2::layer().","code":""},{"path":"/reference/stat_stratum.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Stratum positions — stat_stratum","text":"stat_alluvium, stat_flow, stat_stratum require one two sets aesthetics: x least one alluvium stratum number axis[0-9]* (axis1, axis2, etc.) Use x, alluvium, /stratum data lodes format axis[0-9]* data alluvia format (see alluvial-data). Arguments parameters inconsistent format ignored. Additionally, stat_*() accepts following optional aesthetics: y weight order group label y controls heights alluvia, may aggregated across equivalent observations. weight applies computed variables (see section ) affect positional aesthetics. order, recognized stat_alluvium() stat_flow(), used arrange lodes within stratum. tolerates duplicates takes precedence differentiation aesthetics (aes.bind \"none\") lode guidance respect remaining axes. (replaces deprecated parameter lode.ordering.) group used internally; arguments ignored. label used label strata lodes must take unique value across observations within stratum lode. aesthetics aggregated follows: Numeric aesthetics, including y, summed. Character factor aesthetics, including label, assigned strata lodes provided take unique values across observations within (otherwise assigned NA).","code":""},{"path":"/reference/stat_stratum.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Stratum positions — stat_stratum","text":"can used ggplot2::after_stat() control aesthetic evaluation. n number cases lode count cumulative weight lode prop weighted proportion lode stratum value variable used define strata deposit order (signed) strata deposited lode lode label distilled alluvia (stat_alluvium() stat_flow() ) flow direction flow \"\" \"\" axis (stat_flow() ) numerical variables n, count, prop calculated data grouped x weighted weight (addition y). integer variable deposit used internally sort data calculating heights. character variable lode obtained alluvium according distill.","code":""},{"path":"/reference/stat_stratum.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"Stratum positions — stat_stratum","text":"stat_stratum, stat_alluvium, stat_flow order strata lodes according values several parameters, must held fixed across every layer alluvial plot. package-specific options set global values parameters defaulted manually set: ggalluvial.decreasing (stat_*): defaults NA. ggalluvial.reverse (stat_*): defaults TRUE. ggalluvial.absolute (stat_*): defaults TRUE. ggalluvial.cement.alluvia (stat_alluvium): defaults FALSE. ggalluvial.lode.guidance (stat_alluvium): defaults \"zigzag\". ggalluvial.aes.bind (stat_alluvium stat_flow): defaults \"none\". See base::options() use options.","code":""},{"path":"/reference/stat_stratum.html","id":"defunct-parameters","dir":"Reference","previous_headings":"","what":"Defunct parameters","title":"Stratum positions — stat_stratum","text":"previously defunct parameters weight aggregate.wts discontinued. Use y cement.alluvia instead.","code":""},{"path":[]},{"path":"/reference/stat_stratum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratum positions — stat_stratum","text":"","code":"data(vaccinations) # only `stratum` assignment is necessary to generate strata ggplot(vaccinations,        aes(y = freq,            x = survey, stratum = response,            fill = response)) +   stat_stratum(width = .5)   # lode data, positioning with y labels ggplot(vaccinations,        aes(y = freq,            x = survey, stratum = response, alluvium = subject,            label = after_stat(count))) +   stat_stratum(geom = \"errorbar\") +   geom_text(stat = \"stratum\")  # alluvium data, positioning with stratum labels ggplot(as.data.frame(Titanic),        aes(y = Freq,            axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +   geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +   stat_stratum(geom = \"errorbar\") +   scale_x_discrete(limits = c(\"Class\", \"Sex\", \"Age\", \"Survived\"))   # omit labels for strata outside a y range ggplot(vaccinations,        aes(y = freq,            x = survey, stratum = response,            fill = response, label = response)) +   stat_stratum(width = .5) +   geom_text(stat = \"stratum\", min.y = 100)   # date-valued axis variables ggplot(vaccinations,        aes(x = end_date, y = freq, stratum = response, alluvium = subject,            fill = response)) +   stat_alluvium(geom = \"flow\", lode.guidance = \"forward\",                 width = 30) +   stat_stratum(width = 30) +   labs(x = \"Survey date\", y = \"Number of respondents\")   admissions <- as.data.frame(UCBAdmissions) admissions <- transform(admissions, Count = Freq * (-1) ^ (Admit == \"Rejected\")) # use negative y values to encode rejection versus acceptance ggplot(admissions,        aes(y = Count, axis1 = Dept, axis2 = Gender)) +   geom_alluvium(aes(fill = Dept), width = 1/12) +   geom_stratum(width = 1/12, fill = \"black\", color = \"grey\") +   geom_label(stat = \"stratum\", aes(label = after_stat(stratum)), min.y = 200) +   scale_x_discrete(limits = c(\"Department\", \"Gender\"), expand = c(.05, .05))  # computed variable 'deposit' indicates order of each signed stratum ggplot(admissions,        aes(y = Count, axis1 = Dept, axis2 = Gender)) +   geom_alluvium(aes(fill = Dept), width = 1/12) +   geom_stratum(width = 1/12, fill = \"black\", color = \"grey\") +   geom_text(stat = \"stratum\", aes(label = after_stat(deposit)),             color = \"white\") +   scale_x_discrete(limits = c(\"Department\", \"Gender\"), expand = c(.05, .05))  # fixed-width strata with acceptance and rejection totals ggplot(admissions,        aes(y = sign(Count), weight = Count, axis1 = Dept, axis2 = Gender)) +   geom_alluvium(aes(fill = Dept), width = 1/8) +   geom_stratum(width = 1/8, fill = \"black\", color = \"grey\") +   geom_text(stat = \"stratum\",             aes(label = paste0(stratum,                                ifelse(nchar(as.character(stratum)) == 1L,                                       \": \", \"\\n\"),                                after_stat(n))),             color = \"white\", size = 3) +   scale_x_discrete(limits = c(\"Department\", \"Gender\"), expand = c(.05, .05))"},{"path":"/reference/vaccinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Influenza vaccination survey responses — vaccinations","title":"Influenza vaccination survey responses — vaccinations","text":"data set aggregated three RAND American Life Panel (ALP) surveys asked respondents probability vaccinating influenza. responses discretized \"Never\" (0%), \"Always\" (100%), \"Sometimes\" (value). merging, missing responses coded \"Missing\" respondents grouped counted three coded responses. pre-processed data kindly contributed Raffaele Vardavas, complete surveys freely available ALP website.","code":""},{"path":"/reference/vaccinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Influenza vaccination survey responses — vaccinations","text":"","code":"vaccinations"},{"path":"/reference/vaccinations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Influenza vaccination survey responses — vaccinations","text":"data frame 117 rows 5 variables: freq number respondents represented row subject identifier linking respondents across surveys survey survey designation ALP website start_date start date survey end_date end date survey response discretized probability vaccinating influenza","code":""},{"path":"/reference/vaccinations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Influenza vaccination survey responses — vaccinations","text":"https://alpdata.rand.org/","code":""},{"path":"/news/index.html","id":"ggalluvial-0125","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.12.5","title":"ggalluvial 0.12.5","text":"CRAN release: 2023-02-22 patch fixes bug involving {dplyr} functions first() last() shifted fixed 0.12.4. Rather imported build, accessed internally thus imported use. See issues #107 https://github.com/corybrunson/ggalluvial/issues/107 #108 https://github.com/corybrunson/ggalluvial/issues/108 GitHub details.","code":""},{"path":"/news/index.html","id":"ggalluvial-0124","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.12.4","title":"ggalluvial 0.12.4","text":"CRAN release: 2023-02-03","code":""},{"path":"/news/index.html","id":"linewidth-aesthetic-breaking-change-0-12-4","dir":"Changelog","previous_headings":"","what":"linewidth aesthetic (breaking change)","title":"ggalluvial 0.12.4","text":"upcoming release ggplot2 controls stroke width using new linewidth aesthetic rather size. release adapts change internally updating row column layers recommended : https://www.tidyverse.org/blog/2022/08/ggplot2-3-4-0-size--linewidth/","code":""},{"path":"/news/index.html","id":"curve-constructors-0-12-4","dir":"Changelog","previous_headings":"","what":"Curve constructors","title":"ggalluvial 0.12.4","text":"Various curve constructors alluvia flows consolidated data_to_alluvium() positions_to_flow(), now exported user well used internally GeomAlluvium$draw_group GeomFlow$draw_panel, respectively.","code":""},{"path":"/news/index.html","id":"error-handling-0-12-4","dir":"Changelog","previous_headings":"","what":"Error handling","title":"ggalluvial 0.12.4","text":"Rather throw error y values NA, stat layers now follow ggplot2 convention, using remove_missing() setup step na.rm parameter passed layer.","code":""},{"path":"/news/index.html","id":"aesthetic-defaults-0-12-4","dir":"Changelog","previous_headings":"","what":"Aesthetic defaults","title":"ggalluvial 0.12.4","text":"address #78 clarity, legacy default colour = 0 three Geom*()s changed colour = \"transparent\".","code":""},{"path":"/news/index.html","id":"skipping-examples-0-12-4","dir":"Changelog","previous_headings":"","what":"Skipping examples","title":"ggalluvial 0.12.4","text":"\\dontrun markers replace \\donttest, per advice : https://stackoverflow.com//68936484/4556798. added order reduce time required run.","code":""},{"path":"/news/index.html","id":"vignette-revisions-0-12-4","dir":"Changelog","previous_headings":"","what":"Vignette revisions","title":"ggalluvial 0.12.4","text":"primary vignette now uses HairEyeColor data set, rather -using Titanic, illustrate parallel sets plot. Shiny vignette includes embedded app using IFrame.","code":""},{"path":"/news/index.html","id":"dependency-upgrades-0-12-4","dir":"Changelog","previous_headings":"","what":"Dependency upgrades","title":"ggalluvial 0.12.4","text":"deprecated .dots argument dplyr::group_by() replaced dplyr::across(), preventing warning.","code":""},{"path":"/news/index.html","id":"ggalluvial-0123","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.12.3","title":"ggalluvial 0.12.3","text":"CRAN release: 2020-12-05","code":""},{"path":"/news/index.html","id":"shiny-vignette-0-12-3","dir":"Changelog","previous_headings":"","what":"Shiny vignette","title":"ggalluvial 0.12.3","text":"new vignette Quentin D. Read shows build interactive Shiny apps tooltips sensitive locations graphical elements. especially important spline boundaries flows alluvia.","code":""},{"path":"/news/index.html","id":"examples-using-vaccinations-data-0-12-3","dir":"Changelog","previous_headings":"","what":"Examples using vaccinations data","title":"ggalluvial 0.12.3","text":"Corrections made erroneous legacy code, found one example two vignettes, reorder factor levels \"response\" field data set vaccinations. documentation updated accordingly. Also, explanation (misleading) column names data set added main vignette.","code":""},{"path":"/news/index.html","id":"ggalluvial-0122","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.12.2","title":"ggalluvial 0.12.2","text":"CRAN release: 2020-08-30 patch addresses bug introduced v0.12.0 is_lodes_form() return error data frame contains duplicate id-axis pairings, may appropriate producing faceted plots. new site parameter can passed one grouping variables purpose, internally passed \"PANEL\" prevent error thrown.","code":""},{"path":"/news/index.html","id":"ggalluvial-0121","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.12.1","title":"ggalluvial 0.12.1","text":"CRAN release: 2020-08-10 patch corrects bug introduced v0.12.0 dropped missing values used internally StatFlow$compute_panel() keep track flowless lodes. problem illustrated issue #64.","code":""},{"path":"/news/index.html","id":"ggalluvial-0120","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.12.0","title":"ggalluvial 0.12.0","text":"CRAN release: 2020-07-14","code":""},{"path":"/news/index.html","id":"data-sets-0-12-0","dir":"Changelog","previous_headings":"","what":"Data sets","title":"ggalluvial 0.12.0","text":"installed data sets, vaccinations majors, better documented. field vaccinations (within-survey fraction respondents, can computed fields) removed, start_date end_date fields (Dates, obtained ALP website) added.","code":""},{"path":"/news/index.html","id":"warning-and-error-messages-0-12-0","dir":"Changelog","previous_headings":"","what":"Warning and error messages","title":"ggalluvial 0.12.0","text":"following changes broke examples tests change behavior rare cases: is_lodes_form() now returns FALSE axis-alluvium pairs duplicated, throws previous warning message. helpful previous behavior suppressing warning leaving tidyr::gather() throw error referring rows already-transformed internal data. Default aesthetic specifications stratum = NULL alluvium = NULL added stats. prevents “unknown aesthetics” warnings print aesthetics passed layers rather plot initialization.","code":""},{"path":[]},{"path":"/news/index.html","id":"behavior-of-lodeordering-0-12-0","dir":"Changelog","previous_headings":"Ordering of lodes/alluvia","what":"Behavior of lode.ordering","title":"ggalluvial 0.12.0","text":"consistency behavior aes.bind, stat_alluvium() now invokes lode.ordering together lode.guidance: vectors lode.ordering include duplicates, .e. completely determine order, remaining deposits used refine order. Previously, lode.ordering assumed consist permutation vectors, two parameters mutually exclusive. Additionally, consistency influences lode order, vectors lode.ordering reversed reverse = TRUE (default). change plots produce new errors.","code":""},{"path":"/news/index.html","id":"controlling-lode-order-before-guidance-and-aesthetics-0-12-0","dir":"Changelog","previous_headings":"Ordering of lodes/alluvia","what":"Controlling lode order before guidance and aesthetics","title":"ggalluvial 0.12.0","text":"lode.ordering parameter stat_alluvium() deprecated. Instead, new order aesthetic gives priority argument differentiation aesthetics arranging lodes within stratum, without producing graphical artifacts. aesthetic can also used stat_flow().","code":""},{"path":"/news/index.html","id":"order-of-alluvia-in-negative-strata-0-12-0","dir":"Changelog","previous_headings":"Ordering of lodes/alluvia","what":"Order of alluvia in negative strata","title":"ggalluvial 0.12.0","text":"Alluvia within “deposits” now consistently ordered positive negative strata, rather according absolute. avoids “twisting” flows strata different signs. Whereas orderings deposits matter stacked-histogram reading plot, orderings alluvia simply maximize elegance readability. change plots produce new errors.","code":""},{"path":"/news/index.html","id":"computed-variables-0-12-0","dir":"Changelog","previous_headings":"","what":"Computed variables","title":"ggalluvial 0.12.0","text":"alluvial stats now compute four variables use after_stat(): numeric variables n, count, prop; character variables lode (alluvium aesthetic specified) flow (using flow stat). numerical variables can weighted using weight aesthetic, dropped computation (confuse geoms), lode distilled according new distill parameter. use weight may cause confusion use is_*_form() functions upgraded next version. new variables complement already-computed heretofore undocumented variables stratum deposit. stratum obviates need infer.label parameter, deprecated. alias, label.strata, now defunct. (variable alluvium often computed, manipulated used geom layers passed aesthetic.) deposit takes contiguous integer values forward along axes upward along (signed) strata axis.","code":""},{"path":"/news/index.html","id":"flow-upgrades-and-extensions-0-12-0","dir":"Changelog","previous_headings":"","what":"Flow upgrades and extensions","title":"ggalluvial 0.12.0","text":"knot.pos parameter geom_alluvium() geom_flow() now interpreted proportion total length flow, .e. gap adjacent strata (axes). means values vary axis positions stratum widths. Setting new knot.prop parameter FALSE prevents interpreting knot.pos constant value x direction. flows rendered using grid::xsplineGrob() four control points : endpoints two knots. complement , several curves now available: linear (equivalent knot.pos = 0), cubic, quintic, sinusoidal, arctangent, sigmoid, summoned new curve_type parameter (defaults x-spline). (asymptotic functions, arctangent sigmoid, compressed according new curve_range parameter.) new curves rendered piecewise linearly, resolution controlled new segments parameter (similar ggplot2::stat_ellipse()).","code":""},{"path":"/news/index.html","id":"options-0-12-0","dir":"Changelog","previous_headings":"","what":"Options","title":"ggalluvial 0.12.0","text":"stratum lode ordering parameters now default NULL, case reassigned global options internally. simplifies documentation. new curve parameters curve_type, curve_range, segments can also set options documented way.","code":""},{"path":"/news/index.html","id":"ggalluvial-0113","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.11.3","title":"ggalluvial 0.11.3","text":"CRAN release: 2020-04-16","code":""},{"path":"/news/index.html","id":"dependencies-0-11-3","dir":"Changelog","previous_headings":"","what":"Dependencies","title":"ggalluvial 0.11.3","text":"response ggplot2 v3.2.0, removes plyr dependency, dependency removed ggalluvial well.","code":""},{"path":"/news/index.html","id":"ggalluvial-0112","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.11.2","title":"ggalluvial 0.11.2","text":"function self_adjoin() debugged use continuous-valued x variable. example, taking x date vaccination survey vaccinations, documented stat_stratum().","code":""},{"path":"/news/index.html","id":"ggalluvial-0111","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.11.1","title":"ggalluvial 0.11.1","text":"CRAN release: 2019-12-03 patch fixes bug including negative observations alluvia-form data due outdated code prohibited negative y values. discovered drafting two examples usage, included documentation.","code":""},{"path":[]},{"path":"/news/index.html","id":"parameter-renamings-deprecations-and-additions-0-11-0","dir":"Changelog","previous_headings":"","what":"Parameter renamings, deprecations, and additions","title":"ggalluvial 0.11.0","text":"min.height max.height parameters stat_stratum() deprecated favor min.y max.y (better adhere ggplot2 conventions) extended stat_*() layers. label.strata parameter stat_stratum() deprecated favor infer.label, extended stat_*() layers sets label alluvium cases rather stratum. aggregate.y parameter stat_alluvium() deprecated favor cement.alluvia, underlying procedure debugged. aes.bind parameter stat_flow() stat_alluvium() now prefers character string options logical values, described lode ordering vignette: \"none\", \"flows\", \"alluvia\". default \"none\" produces different behavior previous default FALSE, setting aesthetic variables prioritized. previously defunct stat parameters weight aggregate.wts discontinued.","code":""},{"path":"/news/index.html","id":"negative-observations-0-11-0","dir":"Changelog","previous_headings":"","what":"Negative observations","title":"ggalluvial 0.11.0","text":"Negative values can now meaningfully passed y, producing behavior mimics geom_bar(). new logical parameter absolute controls whether negative strata, lodes within , ordered vertically way positive strata lodes (FALSE) opposite way (TRUE). Additionally, negate.strata parameter can used negate observations associated specific strata, order situate rather x axis.","code":""},{"path":"/news/index.html","id":"new-lode-guidance-function-0-11-0","dir":"Changelog","previous_headings":"","what":"New lode guidance function","title":"ggalluvial 0.11.0","text":"new lode guidance function lode_zagzig() mimics behavior lode_zigzag() except initially “zagging” toward farther end rather “zigging” toward closer end.","code":""},{"path":"/news/index.html","id":"stat-layer-consistency-0-11-0","dir":"Changelog","previous_headings":"","what":"Stat layer consistency","title":"ggalluvial 0.11.0","text":"stat_*() internals simplified standardized, particular manner lodes ordered within strata.","code":""},{"path":"/news/index.html","id":"layer-tests-0-11-0","dir":"Changelog","previous_headings":"","what":"Layer tests","title":"ggalluvial 0.11.0","text":"Tests added statistical transformations. Visual regression tests using vdiffr added geoms.","code":""},{"path":"/news/index.html","id":"ggalluvial-0100","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.10.0","title":"ggalluvial 0.10.0","text":"CRAN release: 2019-09-02","code":""},{"path":"/news/index.html","id":"lode-guidance-and-ordering-0-10-0","dir":"Changelog","previous_headings":"","what":"Lode guidance and ordering","title":"ggalluvial 0.10.0","text":"lode guidance functions renamed follows original names retained aliases: Additionally, lode.ordering now accepts single integer vector length number cases (alluvia), use vector sort lodes within strata axis. Finally, new vignette showcases related functionality using small example.","code":""},{"path":"/news/index.html","id":"defunct-parameters-0-10-0","dir":"Changelog","previous_headings":"","what":"Defunct parameters","title":"ggalluvial 0.10.0","text":"following parameters, deprecated previous versions, now defunct (informative messages): weight stat_*()s (replaced y) aggregate.wts stat_alluvium() (replaced aggregate.y) logical is_*_form()s","code":""},{"path":"/news/index.html","id":"default-geom-layer-parameters-0-10-0","dir":"Changelog","previous_headings":"","what":"Default geom layer parameters","title":"ggalluvial 0.10.0","text":"width knot.pos parameters sometimes required Geom*$setup_data() now set defaults geom_*()s called stat. Previously-implemented warnings removed.","code":""},{"path":"/news/index.html","id":"custom-lode-guidance-functions-0-10-0","dir":"Changelog","previous_headings":"","what":"Custom lode guidance functions","title":"ggalluvial 0.10.0","text":"lode.guidance argument stat_alluvial() now accepts functions input, making use custom functions easier demonstrated example.","code":""},{"path":[]},{"path":"/news/index.html","id":"height-limits-on-strata-0-9-2","dir":"Changelog","previous_headings":"","what":"Height limits on strata","title":"ggalluvial 0.9.2","text":"Parameters min.height max.height introduced stat_stratum() allow users omit strata outside given height range. probably relevant stratum labeling, illustrated updated vignette.","code":""},{"path":"/news/index.html","id":"ggalluvial-091","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.9.1","title":"ggalluvial 0.9.1","text":"CRAN release: 2018-10-21","code":""},{"path":"/news/index.html","id":"suggest-sessioninfo-for-session_info-0-9-1","dir":"Changelog","previous_headings":"","what":"Suggest sessioninfo for session_info()","title":"ggalluvial 0.9.1","text":"functional (e.g. README.md) occurrence devtools call session_info() ends vignettes, suggestion usage switched sessioninfo.","code":""},{"path":"/news/index.html","id":"markdown-formatting-0-9-1","dir":"Changelog","previous_headings":"","what":"markdown formatting","title":"ggalluvial 0.9.1","text":"Documentation slightly reformatted due switching roxygen syntax markdown.","code":""},{"path":"/news/index.html","id":"z-ordering-patch-0-9-1","dir":"Changelog","previous_headings":"","what":"z-ordering patch","title":"ggalluvial 0.9.1","text":"internal z-ordering function z_order_aes failed recognize contiguous segments alluvia, thereby assigning later segments missing values 'group' preventing rendered. corrected.","code":""},{"path":"/news/index.html","id":"ggalluvial-090","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.9.0","title":"ggalluvial 0.9.0","text":"CRAN release: 2018-07-06","code":""},{"path":"/news/index.html","id":"geom_alluvium-patch-0-9-0","dir":"Changelog","previous_headings":"","what":"geom_alluvium() patch","title":"ggalluvial 0.9.0","text":"occurrence weight geom_alluvium() updated v0.8.0 caused geom_alluvium() throw error cases. corrected.","code":""},{"path":"/news/index.html","id":"geom_flow-patch-0-9-0","dir":"Changelog","previous_headings":"","what":"geom_flow() patch","title":"ggalluvial 0.9.0","text":"earlier solution z-ordering problem sufficed matched layers (*_alluvium() *_flow()) failed combination stat_alluvium() geom_flow(). corrected code GeomFlow$draw_panel(), though elegant general solution preferred.","code":""},{"path":"/news/index.html","id":"deprecated-parameters-removed-0-9-0","dir":"Changelog","previous_headings":"","what":"Deprecated parameters removed","title":"ggalluvial 0.9.0","text":"deprecated parameters axis_width (geom layers) ribbon_bend (geom_alluvium() geom_flow()) removed explanatory note added layers’ documentation.","code":""},{"path":"/news/index.html","id":"vignette-on-labeling-small-strata-0-9-0","dir":"Changelog","previous_headings":"","what":"Vignette on labeling small strata","title":"ggalluvial 0.9.0","text":"vignette illustrating two methods labeling small strata, using ggplot2 extensions, included.","code":""},{"path":"/news/index.html","id":"self_adjoin-export-0-9-0","dir":"Changelog","previous_headings":"","what":"self_adjoin() export","title":"ggalluvial 0.9.0","text":"internal function self_adjoin(), invoked geom_flow(), revised, exported, documented, exemplified.","code":""},{"path":[]},{"path":"/news/index.html","id":"stat-layer-functionality-0-8-0","dir":"Changelog","previous_headings":"","what":"Stat layer functionality","title":"ggalluvial 0.8.0","text":"weight aesthetic three stat_*() functions replaced y aesthetic, scale_y_continuous() correctly transform vertical scales layers. example provided documentation stat_alluvium(). y aesthetic must present order scales correctly transformed. weight parameter still available deprecated. consistency switch weight y, aggregate.wts parameter stat_alluvium() replaced aggregate.y; aggregate.wts deprecated.","code":""},{"path":"/news/index.html","id":"alluvial-data-functionality-0-8-0","dir":"Changelog","previous_headings":"","what":"Alluvial data functionality","title":"ggalluvial 0.8.0","text":"Tests alluvial format silenced inside stat_*() functions.","code":""},{"path":[]},{"path":"/news/index.html","id":"alluvial-data-functionality-0-7-0","dir":"Changelog","previous_headings":"","what":"Alluvial data functionality","title":"ggalluvial 0.7.0","text":"changes make functions test convert alluvial formats behave like popular functions tidyverse. changes introduce backward incompatibilities, result deprecation warnings. functions is_alluvial_*() to_*() renamed is_*_form() to_*_form() consistency. old names deprecated. is_alluvial() deprecated removed future version. parameter logical deprecated. future version, functions is_*_form() return logical values. setting silent = TRUE now silences messages. functions is_*_form() now return FALSE weights negative, message effect. functions now accept unquoted variable names key, value, id, weight, diffuse parameters, using --date rlang tidyselect functionality. axes parameter is_alluvia_form() to_lodes_form() now accepts dplyr::vars() objects, dplyr::select_at(). Alternatively, variables can fed functions dplyr::select(), collected rlang::quos(...) used axis variables. axes NULL, additional arguments ignored. functions to_*_form() now merge internal reshapen data frames distilled diffused variables consistent order, placing distilled diffused variables left.","code":""},{"path":"/news/index.html","id":"ggalluvial-060","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.6.0","title":"ggalluvial 0.6.0","text":"CRAN release: 2018-02-04","code":""},{"path":"/news/index.html","id":"cran-checks-for-v050-0-6-0","dir":"Changelog","previous_headings":"","what":"CRAN checks for v0.5.0","title":"ggalluvial 0.6.0","text":"package now Depends R v3.3.0 (patch number zero) instead v3.3.1. ’ve unable install version locally, slight chance incompatibility ’ll watchful going forward. grid alluvial packages now Suggests rather Imports.","code":""},{"path":"/news/index.html","id":"alluvial-data-functionality-0-6-0","dir":"Changelog","previous_headings":"","what":"Alluvial data functionality","title":"ggalluvial 0.6.0","text":"Source files documentation is_alluvial_*() to_*() functions combined; see help(\"alluvial-data\"). is_alluvial_alluvia now prints message rather warning combinations strata linked alluvia. to_lodes() now diffuse parameter join original variables reformatted data id variable (alluvium). makes possible assign original variables aesthetics reformatting, illustrated new example. to_alluvia() now distill parameter control inclusion original variables vary within values id reformatted data, based distilling function returns single value vector. to_lodes() now logical discern parameter uses make.unique() make stratum values appear different axes distinct. stat_*() functions can pass parameter internally print warning data already lodes form.","code":""},{"path":"/news/index.html","id":"layer-internals-0-6-0","dir":"Changelog","previous_headings":"","what":"Layer internals","title":"ggalluvial 0.6.0","text":"GeomFlow$draw_panel() now begins restricting complete.cases(), corresponding flows starting terminating axes. (done StatFlow$compute_panel(), effect excluding missing aesthetic values legends.) GeomAlluvium$setup_data() now throws warning color differentiation aesthetics vary within alluvia. bug processing custom lode.ordering argument StatAlluvium$compute_panel() fixed.","code":""},{"path":"/news/index.html","id":"ggalluvial-050","dir":"Changelog","previous_headings":"","what":"ggalluvial 0.5.0","title":"ggalluvial 0.5.0","text":"CRAN release: 2017-11-26","code":""},{"path":"/news/index.html","id":"backward-incompatibilities-0-5-0","dir":"Changelog","previous_headings":"","what":"Backward incompatibilities","title":"ggalluvial 0.5.0","text":"ggalluvial() shortcut function, included formula interface, deprecated version 0.4.0, removed.","code":""}]
